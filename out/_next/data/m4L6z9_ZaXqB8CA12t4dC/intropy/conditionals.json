{"pageProps":{"courseData":{"href":"intropy","difficulty":"Beginner","name":"Introduction to Python"},"walkthroughData":{"lessons":[{"name":"Introduction","href":"introduction"},{"name":"Variables and Data Types","href":"variables"},{"name":"Console I/O","href":"consoleio"},{"name":"Arithmetic Operations","href":"arithmetic"},{"name":"Control Structures: Conditionals","href":"conditionals"},{"name":"Control Structures: Loops","href":"loops"},{"name":"Lists","href":"lists"}],"wipLessons":[{"name":"Functions","href":"functions"},{"name":"C++ Standard Library (STL)","href":"cppstandardlibrary"},{"name":"Debugging","href":"debugging"}]},"lessonData":{"name":"Control Structures: Conditionals","href":"conditionals"},"mdContent":{"compiledSource":"var m=Object.defineProperty,c=Object.defineProperties;var N=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var s=(a,n,t)=>n in a?m(a,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[n]=t,e=(a,n)=>{for(var t in n||(n={}))p.call(n,t)&&s(a,t,n[t]);if(o)for(var t of o(n))i.call(n,t)&&s(a,t,n[t]);return a},l=(a,n)=>c(a,N(n));var d=(a,n)=>{var t={};for(var r in a)p.call(a,r)&&n.indexOf(r)<0&&(t[r]=a[r]);if(a!=null&&o)for(var r of o(a))n.indexOf(r)<0&&i.call(a,r)&&(t[r]=a[r]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var r=t,{components:a}=r,n=d(r,[\"components\"]);return mdx(MDXLayout,l(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(\"h1\",e({},{id:\"the-problem\"}),\"The Problem\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Write a program that, given a fahrenheit temperature reading from a thermometer, tells the user whether the patient has a healthy body temperature or not.\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"(Assume that a temperature over or equal to 100\\u2109 indicates a fever)\"))),mdx(\"li\",{parentName:\"ul\"},\"You already know how to:\"),mdx(\"li\",{parentName:\"ul\"},\"Take an input from the user and assign it to a variable\"),mdx(\"li\",{parentName:\"ul\"},\"Print out information for the user to see through the consoleHow can you make the program change what it does, based off of what the user types in?\"),mdx(\"li\",{parentName:\"ul\"},\"One way is to use \",mdx(\"strong\",{parentName:\"li\"},\"if/else statements\"),\":\")),mdx(\"p\",null,\"To solve our problem, we have decided to use  \",mdx(\"strong\",{parentName:\"p\"},\"if/else statements\"),\" . But how exactly do these  \",mdx(\"strong\",{parentName:\"p\"},\"if/else statements\"),\"  work?\"),mdx(\"h1\",e({},{id:\"ifelse-structure\"}),\"If/Else structure\"),mdx(\"p\",null,\"![\",\"[python-4-if.png]\",\"]\"),mdx(\"h1\",e({},{id:\"syntax\"}),\"Syntax\"),mdx(\"p\",null,\"The if statement is structured like this:\"),mdx(\"pre\",e({},{className:\"language-python\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"condition\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`   \n    do this\n`)),mdx(\"p\",null,\"When the condition is \",mdx(\"inlineCode\",{parentName:\"p\"},\"True\"),\", the statements under the indent are executed.\"),mdx(\"p\",null,\"If it is \",mdx(\"inlineCode\",{parentName:\"p\"},\"False\"),\", the statements under the indent are ignored.\"),mdx(\"pre\",e({},{className:\"language-python\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-python\"}),\"num \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin\"}),\"int\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin\"}),\"input\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" num \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"10\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"\\u201CGreater than \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"10\"),\"\\u201D\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`)),mdx(\"p\",null,\"The condition does not need to be surrounded in parenthesis, but it can be.\"),mdx(\"h1\",e({},{id:\"indents-in-python\"}),\"Indents in Python\"),mdx(\"p\",null,\"When writing programs in Python, you\\u2019ll notice that some lines of code are  \",mdx(\"em\",{parentName:\"p\"},\"indented\"),\" .\"),mdx(\"pre\",e({},{className:\"language-python\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-python\"}),\"num \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin\"}),\"int\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin\"}),\"input\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"condition\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    do this `,mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"# Indented\"),`\n`)),mdx(\"p\",null,\"Indented lines are used to tell python which lines are part of the if statement and should be executed, like this:\"),mdx(\"pre\",e({},{className:\"language-python\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-python\"}),\"condition \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token boolean\"}),\"True\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"condition\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`    \n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"\\u201CPart of the \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" statement\\u201D\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`    \n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"\\u201CAlso part of the \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" statement\\u201D\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    a `,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"3\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"+\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"5\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"*\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"4\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"# Also part of the if statement\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"\\u201CThis \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"is\"),\" outside the indent\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" so it \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"is\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"not\"),\" part of the \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" statement\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"\\u201D\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"# Statements after the indent are always executed.\"),`\n`)),mdx(\"h1\",e({},{id:\"comparison-operators\"}),\"Comparison Operators\"),mdx(\"p\",null,\"You learned that \",mdx(\"inlineCode\",{parentName:\"p\"},\"=\"),\" is the assignment operator, and does not mean \",mdx(\"em\",{parentName:\"p\"},\"equal to\"),\" .\"),mdx(\"p\",null,\"In Python, \",mdx(\"inlineCode\",{parentName:\"p\"},\"==\"),\" is the equivalence operator:\",mdx(\"inlineCode\",{parentName:\"p\"},\"5 == 5\"),\" is \",mdx(\"inlineCode\",{parentName:\"p\"},\"True\")),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"5 == 2\"),\" is \",mdx(\"inlineCode\",{parentName:\"p\"},\"False\")),mdx(\"p\",null,\"For not equals, we use \",mdx(\"inlineCode\",{parentName:\"p\"},\"!=\"),`:\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"5 != 5\"),\" is \",mdx(\"inlineCode\",{parentName:\"p\"},\"False\")),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"5 != 2\"),\" is \",mdx(\"inlineCode\",{parentName:\"p\"},\"True\")),mdx(\"p\",null,`Greater than and Less than operators also work just like in math:\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"5 < 8\"),\" is \",mdx(\"inlineCode\",{parentName:\"p\"},\"True\"),`\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"5 > 2\"),\" is \",mdx(\"inlineCode\",{parentName:\"p\"},\"True\")),mdx(\"p\",null,\"Finally, Greater than or equal to and less than or equal to use \",mdx(\"inlineCode\",{parentName:\"p\"},\">=\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"<=\"),`:\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"5 <= 5\"),\" is \",mdx(\"inlineCode\",{parentName:\"p\"},\"True\"),`\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"5 <= 8\"),\" is \",mdx(\"inlineCode\",{parentName:\"p\"},\"True\")),mdx(\"h2\",e({},{id:\"comparison-operators-reference\"}),\"Comparison Operators Reference\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"Assume \",mdx(\"inlineCode\",{parentName:\"p\"},\"a = 10\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"b = 20\"))),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",e({parentName:\"tr\"},{align:\"center\"}),\"Symbol\"),mdx(\"th\",e({parentName:\"tr\"},{align:\"center\"}),\"Operator\"),mdx(\"th\",e({parentName:\"tr\"},{align:\"center\"}),\"Definition\"),mdx(\"th\",e({parentName:\"tr\"},{align:\"center\"}),\"Example\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"==\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"Equal To\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"If the values of two operands are equal, then the condition becomes true.\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"(a == b) is not true.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"!=\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"Not Equal To\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"If values of two operands are not equal, then condition becomes true.\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"(a != b) is true.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\">\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"Greater Than\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"If the value of left operand is greater than the value of right operand, then condition becomes true.\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"(a > b) is not true.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"<\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"Less Than\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"If the value of left operand is less than the value of right operand, then condition becomes true.\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"(a < b) is true.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\">=\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"Greater Than or Equal To\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"If the value of left operand is greater than or equal to the value of right operand, then condition becomes true.\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"(a >= b) is not true.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"<=\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"Less Than or Equal To\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"If the value of left operand is less than or equal to the value of right operand, then condition becomes true.\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"(a <= b) is true.\")))),mdx(\"h2\",e({},{id:\"comparison-operators-practice\"}),\"Comparison Operators Practice\"),mdx(\"p\",null,\"Evaluate each of the Python expressions:\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},'`5 == \"5\"'),mdx(\"li\",{parentName:\"ol\"},mdx(\"inlineCode\",{parentName:\"li\"},\"3 != 5 - 2\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"inlineCode\",{parentName:\"li\"},\"5.0 == 5\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"inlineCode\",{parentName:\"li\"},'True == \"True\"')),mdx(\"li\",{parentName:\"ol\"},mdx(\"inlineCode\",{parentName:\"li\"},'False == \"False\"')),mdx(\"li\",{parentName:\"ol\"},\"`5 > 3``\"),mdx(\"li\",{parentName:\"ol\"},mdx(\"inlineCode\",{parentName:\"li\"},\"8 <= 8\"))),mdx(\"h1\",e({},{id:\"solving-the-problem\"}),\"Solving the problem\"),mdx(\"p\",null,\"Write a program that, given a Fahrenheit temperature reading from a thermometer, tells the user whether the patient has a healthy body temperature or not.\"),mdx(\"p\",null,\"Let's solve this problem step by step:\"),mdx(\"p\",null,\"We can see that we need user input, so we need to first store an input inside of a variable, then cast it into a float.\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"body_temp = float(input())\")),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Next, we need to check if the number is greater than 100. We can use an \",mdx(\"inlineCode\",{parentName:\"li\"},\"if\"),\" statement for this:\"),mdx(\"li\",{parentName:\"ul\"},\"How can we modify the code so that it prints \",mdx(\"inlineCode\",{parentName:\"li\"},\"Healthy\"),\" if the body temperature is not greater than 100?\")),mdx(\"pre\",e({},{className:\"language-python\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-python\"}),\"body_temp \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin\"}),\"float\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin\"}),\"input\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" body_temp \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"100\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`    \n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"\\u201CNot Healthy\\u201D\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\"`\\n\")),mdx(\"h1\",e({},{id:\"logical-operators\"}),\"Logical Operators\"),mdx(\"p\",null,\"Operators that deal with boolean values are called  \",mdx(\"strong\",{parentName:\"p\"},\"logical operators\")),mdx(\"p\",null,\"There are three basic logical operators\"),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",e({parentName:\"tr\"},{align:\"center\"}),\"Operator\"),mdx(\"th\",e({parentName:\"tr\"},{align:\"center\"}),\"Definition\"),mdx(\"th\",e({parentName:\"tr\"},{align:\"center\"}),\"Example\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),mdx(\"inlineCode\",{parentName:\"td\"},\"and\")),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"If both the operands are true then condition becomes true.\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"True and True \\u2192 True\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),mdx(\"inlineCode\",{parentName:\"td\"},\"or\")),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"If any of the two operands are non-zero then condition becomes true.\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"True or False \\u2192 True\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),mdx(\"inlineCode\",{parentName:\"td\"},\"not\")),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"Used to reverse the logical state of its operand.\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"not (True or False) \\u2192 False\")))),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Logical operators also have an order of precedence\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"Parenthesis > \",mdx(\"inlineCode\",{parentName:\"li\"},\"not\"),\" > \",mdx(\"inlineCode\",{parentName:\"li\"},\"and\"),\" > \",mdx(\"inlineCode\",{parentName:\"li\"},\"or\"))))),mdx(\"h2\",e({},{id:\"the-and-operator\"}),\"The \",mdx(\"inlineCode\",{parentName:\"h2\"},\"and\"),\" Operator\"),mdx(\"p\",null,\"The \\u201C\",mdx(\"inlineCode\",{parentName:\"p\"},\"and\"),\"\\u201D operator can return either \",mdx(\"inlineCode\",{parentName:\"p\"},\"True\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"False\")),mdx(\"p\",null,`You can think of it this way:\nI want you to give me an apple and a banana.`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"I would not be satisfied with just an apple and no banana (False)\"),mdx(\"li\",{parentName:\"ul\"},\"I would not be satisfied with just a banana and no apple (False)\"),mdx(\"li\",{parentName:\"ul\"},\"I would also not be satisfied with neither (False).\"),mdx(\"li\",{parentName:\"ul\"},\"You need to give me  \",mdx(\"em\",{parentName:\"li\"},\"both\"),\"  conditions, for me to be satisfied (True).\")),mdx(\"p\",null,\"For example:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`a = 4\nb = 5\n\n(a == 4) and (b == 5)\n>>> True\n\n(a == 3) and (b == 5)\n>>> False\n\n(a == 4) and (b == 4)\n>>> False\n`)),mdx(\"h2\",e({},{id:\"the-or-operator\"}),\"The \",mdx(\"inlineCode\",{parentName:\"h2\"},\"or\"),\" Operator\"),mdx(\"p\",null,\"If I wanted an apple  \",mdx(\"em\",{parentName:\"p\"},\"or\"),\" a banana, I would be fine with you giving me either, or both:\t \"),mdx(\"p\",null,\"no apple, no banana \\u2192  \",mdx(\"inlineCode\",{parentName:\"p\"},\"False\"),`\nno apple, banana \\u2192 `,mdx(\"inlineCode\",{parentName:\"p\"},\"True\"),`\napple, no banana \\u2192  `,mdx(\"inlineCode\",{parentName:\"p\"},\"True\"),`\napple, banana \\u2192  `,mdx(\"inlineCode\",{parentName:\"p\"},\"True\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`a = 4\nb = 5\n\n(a == 4) or (b == 5)\n>>> True\n\n(a == 3) or (b == 5)\n>>> True\n\n(a == 3) or (b == 4)\n>>> False\n`)),mdx(\"h1\",e({},{id:\"the-not-operator\"}),\"The \",mdx(\"inlineCode\",{parentName:\"h1\"},\"not\"),\" Operator\"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"not\"),\" reverses the value:\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"not True\"),\" \\u2192 \",mdx(\"inlineCode\",{parentName:\"p\"},\"False\"),`\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"not False\"),\" \\u2192 \",mdx(\"inlineCode\",{parentName:\"p\"},\"True\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`a = 4\n\nb = 5\n\nnot ((a == 4) or (b == 5))\n> False\n\n(a == 4) and (not(b == 6))\n> True\n\n`)),mdx(\"h1\",e({},{id:\"conditionals-with-strings\"}),\"Conditionals with Strings\"),mdx(\"p\",null,\"We can use both numbers and strings in our conditionals.\"),mdx(\"p\",null,\"When two strings are \",mdx(\"strong\",{parentName:\"p\"},\"exactly the same\"),\", Python considers them equal (\",mdx(\"inlineCode\",{parentName:\"p\"},\"==\"),\").\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`a = \\u201Chello world\\u201D\nb = \\u201CHELLO WORLD\\u201D\n\nprint(a == b)\n>>> False\n\nprint(a == \\u201Chello world\\u201D)\n>>> True\n\nprint(a != b)\n>>> True\n`)),mdx(\"h2\",e({},{id:\"lets-practice\"}),\"Let\\u2019s Practice\"),mdx(\"p\",null,\"Evaluate if the expression is True or False:\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"Remember: The order of precedence is parenthesis > \",mdx(\"inlineCode\",{parentName:\"p\"},\"not\"),\" > \",mdx(\"inlineCode\",{parentName:\"p\"},\"and\"),\" > \",mdx(\"inlineCode\",{parentName:\"p\"},\"or\"))),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"True and True or False\")),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"(5 != 0) or (0 != 0)\")),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"not (27/3 + 3 == 3*2*4/2)\")),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"False or False and True\")),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"not (25/(13+12) != 1) and True\")),mdx(\"h2\",e({},{id:\"try-it-yourself\"}),\"Try it yourself\"),mdx(\"p\",null,\"Write a program which asks the user two integers: the length and width of a rectangle. The program then tells the user whether the rectangle is a square or not.\"),mdx(\"p\",null,\"Example output:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`length: 10\nwidth: 20\n>>> not a square\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`length: 25\nwidth: 25\n>>> Square\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`length: 0\nwidth: -10\n>>> Not a square\n`)),mdx(\"h1\",e({},{id:\"else-and-else-if-statements\"}),\"Else and Else If Statements\"),mdx(\"p\",null,\"Else if statements come after if statements and use the \",mdx(\"inlineCode\",{parentName:\"p\"},\"elif\"),` keyword\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"elif\"),\": \\u201Cif the previous conditions were \",mdx(\"inlineCode\",{parentName:\"p\"},\"False\"),\", try this condition:\\u201D\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`if (A):    \n# Do this if A is True\nelif (B):\n# Do this if A is False, but B is True\n\n\nelif (C):    # Do this if A and B is False, but C is True\n`)),mdx(\"p\",null,\"You can use an else statement for anything that does not satisfy all preceding conditions.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`if (A):\n# Do this if A is True\nelif (B):\n# Do this if A is False, but B is True\nelse:\n# Do this if everything else is False\\`\\`\\`\n`)),mdx(\"h2\",e({},{id:\"try-it-yourself-1\"}),\"Try it yourself\"),mdx(\"p\",null,\"Write a program that accepts passwords from the user, and tells the user whether the password matches with the one stored inside.\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\"Important: Don't put any of your actual passwords, repl projects are public!\"))),mdx(\"p\",null,\"Ex. if my password is the string \",mdx(\"inlineCode\",{parentName:\"p\"},'\"EggsAndSpam123\"'),\":\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`Enter a password: Hello World \n>>> Not correct\n\nEnter a password: SpamAndEggs\n>>> Not correct\n\nEnter a password: eggsandspam123\n>>> Not correct\n\nEnter a password: EggsAndSpam123\n>>> Correct\n`)),mdx(\"h1\",e({},{id:\"nested-if-statements\"}),\"Nested \",mdx(\"inlineCode\",{parentName:\"h1\"},\"if\"),\" statements\"),mdx(\"p\",null,\"You can write \",mdx(\"inlineCode\",{parentName:\"p\"},\"if\"),\" statements inside of other \",mdx(\"inlineCode\",{parentName:\"p\"},\"if\"),\" statements.\"),mdx(\"p\",null,\"This is called a \",mdx(\"strong\",{parentName:\"p\"},\"nested \",mdx(\"inlineCode\",{parentName:\"strong\"},\"if\"))),mdx(\"pre\",e({},{className:\"language-python\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"a\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"# a is True\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"b\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"# b is True \"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"else\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`       \n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"# b is False\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"else\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`   \n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"# a is False\"),`\n`)),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"First, the program checks for the condition in the outside if.\"),mdx(\"li\",{parentName:\"ul\"},\"if a is True, it will execute the code inside the if\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"This causes it to look inside the inner if\"))),mdx(\"li\",{parentName:\"ul\"},\"if a is False, it will skip the inside and never check if b is True\")),mdx(\"h2\",e({},{id:\"try-it-yourself-2\"}),\"Try it yourself\"),mdx(\"p\",null,\"Write a program to test if a given year is a leap year or not.\"),mdx(\"p\",null,\"A leap year is defined under the following conditions:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"The year is divisible by 4\"),mdx(\"li\",{parentName:\"ul\"},\"However, if the year is a century year (1800, 1900, 2000), it must be divisible by 400 to be considered a leap year\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"Hint: You can use \",mdx(\"inlineCode\",{parentName:\"li\"},\"%\"),\" to check whether a number is divisible by another\")))),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`Enter a year: 1900\n>>> not a leap year\n\nEnter a year: 2000 \n>>> leap year\n\nEnter a year: 2016\n>>> leap year\n\nEnter a year: 2021\n>>> not a leap year\n`)),mdx(\"h1\",e({},{id:\"what-can-we-make\"}),\"What can we make?\"),mdx(\"p\",null,\"Now that you\\u2019ve learned conditionals, you can do many more useful things with programming. One of them could be a simple 4 function calculator.\"),mdx(\"p\",null,\"You can look at the repl.it \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://replit.com/@liuj05/5-Conditionals-Programming\"}),\"here\"),\" as an example.\"),mdx(\"p\",null,\"Using the code provided in this repl, make modifications to it:\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"Add the modulus function to this calculator\"),mdx(\"li\",{parentName:\"ol\"},\"Add the power function (exponent) to this calculator\"),mdx(\"li\",{parentName:\"ol\"},\"Change it so that it can accept floats as its input\")),mdx(\"h1\",e({},{id:\"python-concepts\"}),\"Python Concepts\"),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",e({parentName:\"tr\"},{align:\"center\"}),\"Word\"),mdx(\"th\",e({parentName:\"tr\"},{align:\"center\"}),\"Definition\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"if (condition1):\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"Executes the statements after it which are indented if condition1 is True.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"elif (condition2):\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"Executes the statements after it which are indented if condition2 is True, and everything before it is False.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"else:\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"Executes the statements after it which are indented if everything before it is False\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"and\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"True if both sides are True\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"or\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"True if either sides are True\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"not\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"True if it is False, but False if it is True\")))),mdx(\"h1\",e({},{id:\"vocabulary\"}),\"Vocabulary\"),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",e({parentName:\"tr\"},{align:\"center\"}),\"Word\"),mdx(\"th\",e({parentName:\"tr\"},{align:\"center\"}),\"Definition\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"Nested If\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"An if-else statement structured inside of another if-else statement.\")))))}MDXContent.isMDXComponent=!0;\n","scope":{}},"headings":[{"level":1,"text":"The Problem","slug":"the-problem","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var u=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;var s=(o,t,n)=>t in o?M(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,r=(o,t)=>{for(var n in t||(t={}))u.call(t,n)&&s(o,n,t[n]);if(p)for(var n of p(t))a.call(t,n)&&s(o,n,t[n]);return o},y=(o,t)=>X(o,c(t));var D=(o,t)=>{var n={};for(var e in o)u.call(o,e)&&t.indexOf(e)<0&&(n[e]=o[e]);if(o!=null&&p)for(var e of p(o))t.indexOf(e)<0&&a.call(o,e)&&(n[e]=o[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:o}=e,t=D(e,[\"components\"]);return mdx(MDXLayout,y(r(r({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"The Problem\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"If/Else structure","slug":"ifelse-structure","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var u=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var a=(t,o,n)=>o in t?D(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,p=(t,o)=>{for(var n in o||(o={}))r.call(o,n)&&a(t,n,o[n]);if(u)for(var n of u(o))s.call(o,n)&&a(t,n,o[n]);return t},c=(t,o)=>M(t,X(o));var y=(t,o)=>{var n={};for(var e in t)r.call(t,e)&&o.indexOf(e)<0&&(n[e]=t[e]);if(t!=null&&u)for(var e of u(t))o.indexOf(e)<0&&s.call(t,e)&&(n[e]=t[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:t}=e,o=y(e,[\"components\"]);return mdx(MDXLayout,c(p(p({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"If/Else structure\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Syntax","slug":"syntax","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var e=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var y=(t,o,n)=>o in t?M(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,u=(t,o)=>{for(var n in o||(o={}))a.call(o,n)&&y(t,n,o[n]);if(e)for(var n of e(o))r.call(o,n)&&y(t,n,o[n]);return t},s=(t,o)=>X(t,c(o));var D=(t,o)=>{var n={};for(var p in t)a.call(t,p)&&o.indexOf(p)<0&&(n[p]=t[p]);if(t!=null&&e)for(var p of e(t))o.indexOf(p)<0&&r.call(t,p)&&(n[p]=t[p]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var p=n,{components:t}=p,o=D(p,[\"components\"]);return mdx(MDXLayout,s(u(u({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Syntax\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Indents in Python","slug":"indents-in-python","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var y=(n,t,o)=>t in n?M(n,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):n[t]=o,u=(n,t)=>{for(var o in t||(t={}))r.call(t,o)&&y(n,o,t[o]);if(p)for(var o of p(t))s.call(t,o)&&y(n,o,t[o]);return n},a=(n,t)=>X(n,c(t));var D=(n,t)=>{var o={};for(var e in n)r.call(n,e)&&t.indexOf(e)<0&&(o[e]=n[e]);if(n!=null&&p)for(var e of p(n))t.indexOf(e)<0&&s.call(n,e)&&(o[e]=n[e]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var e=o,{components:n}=e,t=D(e,[\"components\"]);return mdx(MDXLayout,a(u(u({},layoutProps),t),{components:n,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Indents in Python\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Comparison Operators","slug":"comparison-operators","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var u=(o,t,n)=>t in o?M(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,e=(o,t)=>{for(var n in t||(t={}))a.call(t,n)&&u(o,n,t[n]);if(r)for(var n of r(t))s.call(t,n)&&u(o,n,t[n]);return o},y=(o,t)=>X(o,c(t));var D=(o,t)=>{var n={};for(var p in o)a.call(o,p)&&t.indexOf(p)<0&&(n[p]=o[p]);if(o!=null&&r)for(var p of r(o))t.indexOf(p)<0&&s.call(o,p)&&(n[p]=o[p]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var p=n,{components:o}=p,t=D(p,[\"components\"]);return mdx(MDXLayout,y(e(e({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Comparison Operators\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Comparison Operators Reference","slug":"comparison-operators-reference","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var u=(o,t,n)=>t in o?D(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,r=(o,t)=>{for(var n in t||(t={}))a.call(t,n)&&u(o,n,t[n]);if(p)for(var n of p(t))s.call(t,n)&&u(o,n,t[n]);return o},c=(o,t)=>M(o,X(t));var y=(o,t)=>{var n={};for(var e in o)a.call(o,e)&&t.indexOf(e)<0&&(n[e]=o[e]);if(o!=null&&p)for(var e of p(o))t.indexOf(e)<0&&s.call(o,e)&&(n[e]=o[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:o}=e,t=y(e,[\"components\"]);return mdx(MDXLayout,c(r(r({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Comparison Operators Reference\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Comparison Operators Practice","slug":"comparison-operators-practice","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var u=(o,t,n)=>t in o?D(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,e=(o,t)=>{for(var n in t||(t={}))a.call(t,n)&&u(o,n,t[n]);if(r)for(var n of r(t))s.call(t,n)&&u(o,n,t[n]);return o},c=(o,t)=>M(o,X(t));var y=(o,t)=>{var n={};for(var p in o)a.call(o,p)&&t.indexOf(p)<0&&(n[p]=o[p]);if(o!=null&&r)for(var p of r(o))t.indexOf(p)<0&&s.call(o,p)&&(n[p]=o[p]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var p=n,{components:o}=p,t=y(p,[\"components\"]);return mdx(MDXLayout,c(e(e({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Comparison Operators Practice\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Solving the problem","slug":"solving-the-problem","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var u=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;var s=(o,t,n)=>t in o?M(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,r=(o,t)=>{for(var n in t||(t={}))u.call(t,n)&&s(o,n,t[n]);if(p)for(var n of p(t))a.call(t,n)&&s(o,n,t[n]);return o},y=(o,t)=>X(o,c(t));var D=(o,t)=>{var n={};for(var e in o)u.call(o,e)&&t.indexOf(e)<0&&(n[e]=o[e]);if(o!=null&&p)for(var e of p(o))t.indexOf(e)<0&&a.call(o,e)&&(n[e]=o[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:o}=e,t=D(e,[\"components\"]);return mdx(MDXLayout,y(r(r({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Solving the problem\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Logical Operators","slug":"logical-operators","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var e=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable;var s=(o,t,n)=>t in o?D(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,r=(o,t)=>{for(var n in t||(t={}))a.call(t,n)&&s(o,n,t[n]);if(e)for(var n of e(t))u.call(t,n)&&s(o,n,t[n]);return o},c=(o,t)=>M(o,X(t));var y=(o,t)=>{var n={};for(var p in o)a.call(o,p)&&t.indexOf(p)<0&&(n[p]=o[p]);if(o!=null&&e)for(var p of e(o))t.indexOf(p)<0&&u.call(o,p)&&(n[p]=o[p]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var p=n,{components:o}=p,t=y(p,[\"components\"]);return mdx(MDXLayout,c(r(r({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Logical Operators\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"The `and` Operator","slug":"the-and-operator","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable;var i=(n,o,e)=>o in n?D(n,o,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[o]=e,a=(n,o)=>{for(var e in o||(o={}))r.call(o,e)&&i(n,e,o[e]);if(p)for(var e of p(o))u.call(o,e)&&i(n,e,o[e]);return n},s=(n,o)=>M(n,X(o));var y=(n,o)=>{var e={};for(var t in n)r.call(n,t)&&o.indexOf(t)<0&&(e[t]=n[t]);if(n!=null&&p)for(var t of p(n))o.indexOf(t)<0&&u.call(n,t)&&(e[t]=n[t]);return e};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(e){var t=e,{components:n}=t,o=y(t,[\"components\"]);return mdx(MDXLayout,s(a(a({},layoutProps),o),{components:n,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"and\"),\" Operator\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"The `or` Operator","slug":"the-or-operator","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable;var i=(o,n,e)=>n in o?D(o,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):o[n]=e,r=(o,n)=>{for(var e in n||(n={}))a.call(n,e)&&i(o,e,n[e]);if(p)for(var e of p(n))u.call(n,e)&&i(o,e,n[e]);return o},s=(o,n)=>M(o,X(n));var y=(o,n)=>{var e={};for(var t in o)a.call(o,t)&&n.indexOf(t)<0&&(e[t]=o[t]);if(o!=null&&p)for(var t of p(o))n.indexOf(t)<0&&u.call(o,t)&&(e[t]=o[t]);return e};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(e){var t=e,{components:o}=t,n=y(t,[\"components\"]);return mdx(MDXLayout,s(r(r({},layoutProps),n),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"or\"),\" Operator\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"The `not` Operator","slug":"the-not-operator","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable;var i=(n,o,t)=>o in n?D(n,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[o]=t,r=(n,o)=>{for(var t in o||(o={}))a.call(o,t)&&i(n,t,o[t]);if(p)for(var t of p(o))u.call(o,t)&&i(n,t,o[t]);return n},s=(n,o)=>M(n,X(o));var y=(n,o)=>{var t={};for(var e in n)a.call(n,e)&&o.indexOf(e)<0&&(t[e]=n[e]);if(n!=null&&p)for(var e of p(n))o.indexOf(e)<0&&u.call(n,e)&&(t[e]=n[e]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var e=t,{components:n}=e,o=y(e,[\"components\"]);return mdx(MDXLayout,s(r(r({},layoutProps),o),{components:n,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"not\"),\" Operator\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Conditionals with Strings","slug":"conditionals-with-strings","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var e=Object.getOwnPropertySymbols;var s=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable;var a=(t,o,n)=>o in t?D(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,r=(t,o)=>{for(var n in o||(o={}))s.call(o,n)&&a(t,n,o[n]);if(e)for(var n of e(o))u.call(o,n)&&a(t,n,o[n]);return t},i=(t,o)=>M(t,X(o));var y=(t,o)=>{var n={};for(var p in t)s.call(t,p)&&o.indexOf(p)<0&&(n[p]=t[p]);if(t!=null&&e)for(var p of e(t))o.indexOf(p)<0&&u.call(t,p)&&(n[p]=t[p]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var p=n,{components:t}=p,o=y(p,[\"components\"]);return mdx(MDXLayout,i(r(r({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Conditionals with Strings\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Let’s Practice","slug":"lets-practice","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var u=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;var c=(t,o,n)=>o in t?D(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,r=(t,o)=>{for(var n in o||(o={}))u.call(o,n)&&c(t,n,o[n]);if(p)for(var n of p(o))a.call(o,n)&&c(t,n,o[n]);return t},s=(t,o)=>M(t,X(o));var y=(t,o)=>{var n={};for(var e in t)u.call(t,e)&&o.indexOf(e)<0&&(n[e]=t[e]);if(t!=null&&p)for(var e of p(t))o.indexOf(e)<0&&a.call(t,e)&&(n[e]=t[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:t}=e,o=y(e,[\"components\"]);return mdx(MDXLayout,s(r(r({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Let\\u2019s Practice\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Try it yourself","slug":"try-it-yourself","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var u=Object.prototype.hasOwnProperty,y=Object.prototype.propertyIsEnumerable;var s=(o,t,n)=>t in o?M(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,r=(o,t)=>{for(var n in t||(t={}))u.call(t,n)&&s(o,n,t[n]);if(p)for(var n of p(t))y.call(t,n)&&s(o,n,t[n]);return o},a=(o,t)=>X(o,c(t));var D=(o,t)=>{var n={};for(var e in o)u.call(o,e)&&t.indexOf(e)<0&&(n[e]=o[e]);if(o!=null&&p)for(var e of p(o))t.indexOf(e)<0&&y.call(o,e)&&(n[e]=o[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:o}=e,t=D(e,[\"components\"]);return mdx(MDXLayout,a(r(r({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Try it yourself\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Else and Else If Statements","slug":"else-and-else-if-statements","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable;var r=(t,n,o)=>n in t?M(t,n,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[n]=o,s=(t,n)=>{for(var o in n||(n={}))a.call(n,o)&&r(t,o,n[o]);if(p)for(var o of p(n))u.call(n,o)&&r(t,o,n[o]);return t},y=(t,n)=>X(t,c(n));var D=(t,n)=>{var o={};for(var e in t)a.call(t,e)&&n.indexOf(e)<0&&(o[e]=t[e]);if(t!=null&&p)for(var e of p(t))n.indexOf(e)<0&&u.call(t,e)&&(o[e]=t[e]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var e=o,{components:t}=e,n=D(e,[\"components\"]);return mdx(MDXLayout,y(s(s({},layoutProps),n),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Else and Else If Statements\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Try it yourself","slug":"try-it-yourself-1","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var u=Object.prototype.hasOwnProperty,y=Object.prototype.propertyIsEnumerable;var s=(o,t,n)=>t in o?M(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,r=(o,t)=>{for(var n in t||(t={}))u.call(t,n)&&s(o,n,t[n]);if(p)for(var n of p(t))y.call(t,n)&&s(o,n,t[n]);return o},a=(o,t)=>X(o,c(t));var D=(o,t)=>{var n={};for(var e in o)u.call(o,e)&&t.indexOf(e)<0&&(n[e]=o[e]);if(o!=null&&p)for(var e of p(o))t.indexOf(e)<0&&y.call(o,e)&&(n[e]=o[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:o}=e,t=D(e,[\"components\"]);return mdx(MDXLayout,a(r(r({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Try it yourself\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Nested `if` statements","slug":"nested-if-statements","md":{"compiledSource":"var y=Object.defineProperty,D=Object.defineProperties;var M=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var s=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var r=(t,e,n)=>e in t?y(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,a=(t,e)=>{for(var n in e||(e={}))s.call(e,n)&&r(t,n,e[n]);if(p)for(var n of p(e))i.call(e,n)&&r(t,n,e[n]);return t},u=(t,e)=>D(t,M(e));var m=(t,e)=>{var n={};for(var o in t)s.call(t,o)&&e.indexOf(o)<0&&(n[o]=t[o]);if(t!=null&&p)for(var o of p(t))e.indexOf(o)<0&&i.call(t,o)&&(n[o]=t[o]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var o=n,{components:t}=o,e=m(o,[\"components\"]);return mdx(MDXLayout,u(a(a({},layoutProps),e),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Nested \",mdx(\"inlineCode\",{parentName:\"p\"},\"if\"),\" statements\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Try it yourself","slug":"try-it-yourself-2","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var u=Object.prototype.hasOwnProperty,y=Object.prototype.propertyIsEnumerable;var s=(o,t,n)=>t in o?M(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,r=(o,t)=>{for(var n in t||(t={}))u.call(t,n)&&s(o,n,t[n]);if(p)for(var n of p(t))y.call(t,n)&&s(o,n,t[n]);return o},a=(o,t)=>X(o,c(t));var D=(o,t)=>{var n={};for(var e in o)u.call(o,e)&&t.indexOf(e)<0&&(n[e]=o[e]);if(o!=null&&p)for(var e of p(o))t.indexOf(e)<0&&y.call(o,e)&&(n[e]=o[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:o}=e,t=D(e,[\"components\"]);return mdx(MDXLayout,a(r(r({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Try it yourself\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"What can we make?","slug":"what-can-we-make","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var a=Object.getOwnPropertySymbols;var u=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var c=(t,o,n)=>o in t?D(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,p=(t,o)=>{for(var n in o||(o={}))u.call(o,n)&&c(t,n,o[n]);if(a)for(var n of a(o))r.call(o,n)&&c(t,n,o[n]);return t},s=(t,o)=>M(t,X(o));var y=(t,o)=>{var n={};for(var e in t)u.call(t,e)&&o.indexOf(e)<0&&(n[e]=t[e]);if(t!=null&&a)for(var e of a(t))o.indexOf(e)<0&&r.call(t,e)&&(n[e]=t[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:t}=e,o=y(e,[\"components\"]);return mdx(MDXLayout,s(p(p({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"What can we make?\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Python Concepts","slug":"python-concepts","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var e=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var y=(o,t,n)=>t in o?D(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,u=(o,t)=>{for(var n in t||(t={}))r.call(t,n)&&y(o,n,t[n]);if(e)for(var n of e(t))s.call(t,n)&&y(o,n,t[n]);return o},a=(o,t)=>M(o,X(t));var c=(o,t)=>{var n={};for(var p in o)r.call(o,p)&&t.indexOf(p)<0&&(n[p]=o[p]);if(o!=null&&e)for(var p of e(o))t.indexOf(p)<0&&s.call(o,p)&&(n[p]=o[p]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var p=n,{components:o}=p,t=c(p,[\"components\"]);return mdx(MDXLayout,a(u(u({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Python Concepts\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Vocabulary","slug":"vocabulary","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var u=Object.getOwnPropertySymbols;var e=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var y=(o,t,n)=>t in o?D(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,a=(o,t)=>{for(var n in t||(t={}))e.call(t,n)&&y(o,n,t[n]);if(u)for(var n of u(t))r.call(t,n)&&y(o,n,t[n]);return o},c=(o,t)=>M(o,X(t));var s=(o,t)=>{var n={};for(var p in o)e.call(o,p)&&t.indexOf(p)<0&&(n[p]=o[p]);if(o!=null&&u)for(var p of u(o))t.indexOf(p)<0&&r.call(o,p)&&(n[p]=o[p]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var p=n,{components:o}=p,t=s(p,[\"components\"]);return mdx(MDXLayout,c(a(a({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Vocabulary\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}}]},"__N_SSG":true}