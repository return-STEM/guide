{"pageProps":{"courseData":{"href":"intropy","difficulty":"Beginner","name":"Introduction to Python"},"walkthroughData":{"lessons":[{"name":"Introduction","href":"introduction"},{"name":"Variables and Data Types","href":"variables"},{"name":"Console I/O","href":"consoleio"},{"name":"Arithmetic Operations","href":"arithmetic"},{"name":"Control Structures: Conditionals","href":"conditionals"},{"name":"Control Structures: Loops","href":"loops"},{"name":"Lists","href":"lists"},{"name":"Functions","href":"functions"}],"wipLessons":[{"name":"C++ Standard Library (STL)","href":"cppstandardlibrary"},{"name":"Debugging","href":"debugging"}]},"lessonData":{"name":"Lists","href":"lists"},"mdContent":{"compiledSource":"var l=Object.defineProperty,i=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;var m=(e,n,t)=>n in e?l(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,a=(e,n)=>{for(var t in n||(n={}))o.call(n,t)&&m(e,t,n[t]);if(p)for(var t of p(n))c.call(n,t)&&m(e,t,n[t]);return e},r=(e,n)=>i(e,d(n));var N=(e,n)=>{var t={};for(var s in e)o.call(e,s)&&n.indexOf(s)<0&&(t[s]=e[s]);if(e!=null&&p)for(var s of p(e))n.indexOf(s)<0&&c.call(e,s)&&(t[s]=e[s]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var s=t,{components:e}=s,n=N(s,[\"components\"]);return mdx(MDXLayout,r(a(a({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"In past lessons, you learned about different data types and how to manipulate them. Now you will learn one of the most commonly used structures in Python, the list. Lists are useful ways to store collections of data, and will help you write algorithms and other complex programs. \"),mdx(\"p\",null,\"If you have studied another language in the past, Python lists are similar to arrays. \"),mdx(\"h1\",a({},{id:\"what-are-lists\"}),\"What are lists?\"),mdx(\"p\",null,\"A list is simply an ordered collection of items (that we call \",mdx(\"strong\",{parentName:\"p\"},\"elements\"),\"). You've already learned what these items can be: \"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Integers/floats/booleans\"),mdx(\"li\",{parentName:\"ul\"},\"Strings\"),mdx(\"li\",{parentName:\"ul\"},\"Other data types\")),mdx(\"p\",null,\"You can think of lists like a shelf. Shelves can contain different types of items - like books or other ornaments. You put the books there to organize them, and it makes tasks like finding a certain book much easier (compared to if you were to search through every room in your house). \"),mdx(\"p\",null,mdx(\"img\",a({parentName:\"p\"},{src:\"lists/lists-7-example.png\",alt:null}))),mdx(\"p\",null,\"A list is just a way for us to organize data, especially when they are related. Imagine you are writing a program to record the grades that each student gets in a school. You could represent each grade as a float, and put all those grades into a list to store them together. \"),mdx(\"p\",null,\"When data is organized like this, it is clear and concise. Additionally, we can do the same task on each element of the list, such as finding the average value of each number in the list, or others. \"),mdx(\"h1\",a({},{id:\"syntax\"}),\"Syntax\"),mdx(\"p\",null,\"Lists are declared like variables, but use square brackets \",mdx(\"inlineCode\",{parentName:\"p\"},\"[]\"),\" to enclose whatever is inside them:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"list1 \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"cat\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"dog\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"cow\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# assigns the strings cat, dog, and cow to list1.\"),`\n`)),mdx(\"p\",null,\"Each element is separated by a comma \",mdx(\"inlineCode\",{parentName:\"p\"},\",\"),\". For example, this is a list of all the integers from 0 - 9:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"numbers \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"6\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"7\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"8\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"9\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"p\",null,\"But a list can be any data type, for example booleans. If you wanted a list to represent the days that somebody works out in a week, you could make a list with 7 elements, with each element being \",mdx(\"inlineCode\",{parentName:\"p\"},\"True\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"False\"),\", representing whether somebody worked out or not:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"days \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"True\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"False\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"False\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"True\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"True\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"False\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"False\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"p\",null,\"In the future, you will learn other more complex data types like classes and other data structures. These can also reside inside lists. \"),mdx(\"h1\",a({},{id:\"why-use-lists\"}),\"Why Use Lists?\"),mdx(\"p\",null,\"This program represents some information about a student John in some school:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"name \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"John\"'),`\ngrade `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"8\"),`\nscores `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"98.0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"93.0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"87.5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"100.0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\nattendance `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"True\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"False\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"True\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"True\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"True\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"p\",null,\"Instead of writing out attendance as individual variables, we can just include it as a list. \"),mdx(\"p\",null,`But there's another advantage to this: tt becomes much easier to find John\\u2019s average score, or find how many days he has missed class.\nIn fact, most functions that work on groups of data in Python will ask for list input. `),mdx(\"h1\",a({},{id:\"indices\"}),\"Indices\"),mdx(\"p\",null,\"Each item in the list has an \",mdx(\"strong\",{parentName:\"p\"},\"index\"),\" that describes its position in the list. This is similar to someone's position in line--if you're first in line, you are at the front of the line.\"),mdx(\"p\",null,\"However, in programming, the \",mdx(\"strong\",{parentName:\"p\"},\"first element in the list has the index 0\"),\", not at 1. \"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"This is called \",mdx(\"strong\",{parentName:\"p\"},\"zero-indexing\"),\", where zero is the first value of a sequence of numbers (count starting from zero)\")),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"my_list \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'a'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'b'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'c'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'d'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"#           ^    ^    ^    ^\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"#           0    1    2    3\"),`\n`)),mdx(\"p\",null,\"You can access the element at index \",mdx(\"em\",{parentName:\"p\"},\"n\"),\" like this:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"my_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"n\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"p\",null,\"Which finds the element with index \",mdx(\"inlineCode\",{parentName:\"p\"},\"n\"),\" in the list. For example, if\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"my_list \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'a'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'b'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'c'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'d'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"p\",null,`then\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"my_list[0]\"),\" would be \",mdx(\"inlineCode\",{parentName:\"p\"},\"'a'\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"my_list[1]\"),\" would be \",mdx(\"inlineCode\",{parentName:\"p\"},\"'b'\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"my_list[2]\"),\" would be \",mdx(\"inlineCode\",{parentName:\"p\"},\"'c'\"),\", and \",mdx(\"inlineCode\",{parentName:\"p\"},\"my_list[3]\"),\" would be \",mdx(\"inlineCode\",{parentName:\"p\"},\"'d'\"),\".\"),mdx(\"h2\",a({},{id:\"negative-indices\"}),\"Negative indices\"),mdx(\"p\",null,\"Positive indices reference elements from \",mdx(\"em\",{parentName:\"p\"},\"left to right\"),\". But, you can also index from the opposite side, using negative indices. \"),mdx(\"p\",null,\"Negative indices start from the opposite side, from right to left.\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"my_list \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'a'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'b'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'c'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'d'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"#           ^    ^    ^    ^\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"#           -4    -3    -2   -1\"),`\n`)),mdx(\"p\",null,`In this example,\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"my_list[-1]\"),\" is \",mdx(\"inlineCode\",{parentName:\"p\"},\"'d'\"),\", while \",mdx(\"inlineCode\",{parentName:\"p\"},\"my_list[-2]\"),\" is \",mdx(\"inlineCode\",{parentName:\"p\"},\"'c'\"),\". \"),mdx(\"p\",null,\"You can use negative indices to find the last element of a list, or the second to last element, etc. \"),mdx(\"p\",null,\"However, you will eventually learn ways to do this even without using negative indices. \"),mdx(\"h1\",a({},{id:\"getting-and-setting-elements\"}),\"Getting and Setting Elements\"),mdx(\"p\",null,\"You know that you can access elements of a list by using index operator \",mdx(\"inlineCode\",{parentName:\"p\"},\"[]\"),`. You can not only get values from them, but also change the value stored at that location in the list. For example,\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"x = list[0]\"),\" sets variable \",mdx(\"inlineCode\",{parentName:\"p\"},\"x\"),\" to \",mdx(\"inlineCode\",{parentName:\"p\"},\"'a'\"),\", the first element (index 0) in the list\"),mdx(\"p\",null,`You can also set individual elements as well using this technique:\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"my_list[2] = 'y'\"),\" sets the third element (index 2) to \",mdx(\"inlineCode\",{parentName:\"p\"},\"'y'\"),`\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"my_list\"),\" now has the value \",mdx(\"inlineCode\",{parentName:\"p\"},\"['a', 'b', 'y', 'd']\")),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"my_list \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'a'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'b'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'c'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'d'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"my_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\nmy_list`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'y'\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"my_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`)),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{}),`['a', 'b', 'c', 'd']\n['a', 'b', 'y', 'd']\n`)),mdx(\"h1\",a({},{id:\"indexerror\"}),\"IndexError\"),mdx(\"p\",null,\"When designing programs to use lists, you may encounter more errors. One of the common ones that beginners encounter is called the \",mdx(\"inlineCode\",{parentName:\"p\"},\"IndexError\"),\". Python does this when you call for an index in the list that doesn't exist.\"),mdx(\"p\",null,\"Consider this list:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"my_list \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'a'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'b'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'c'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'d'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\nmy_list`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"p\",null,\"Notice that since the list only has 4 elements, \",mdx(\"inlineCode\",{parentName:\"p\"},\"my_list[5]\"),\" doesn't exist! Python will display this error:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"IndexError\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"list\"),\" index out of \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"range\"),`\n`)),mdx(\"p\",null,\"To fix this error, you can trace your code and determine where it's calling for an index that doesn't exist. \"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"Remember that because lists are zero-indexed, a list with \",mdx(\"em\",{parentName:\"p\"},\"n\"),\" elements will have a maximum index of \",mdx(\"em\",{parentName:\"p\"},\"n - 1\"),\", not \",mdx(\"em\",{parentName:\"p\"},\"n\"),\"!\")),mdx(\"h2\",a({},{id:\"list-slicing\"}),\"List Slicing\"),mdx(\"p\",null,\"Just like in strings, lists can also be \",mdx(\"strong\",{parentName:\"p\"},\"sliced\"),\". Slicing effectively \",mdx(\"em\",{parentName:\"p\"},\"creates a new list\"),\" using a part of the original list. Slicing \",mdx(\"strong\",{parentName:\"p\"},\"does not\"),\" effect the old list. \"),mdx(\"p\",null,mdx(\"img\",a({parentName:\"p\"},{src:\"lists/lists5.png\",alt:null}))),mdx(\"p\",null,\"The syntax looks like this: \"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"list_name\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"start\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\"end\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"p\",null,\"(where \",mdx(\"inlineCode\",{parentName:\"p\"},\"start\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"end\"),\" are both indices)\"),mdx(\"p\",null,\"For example:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"lst \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"50\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"70\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"30\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"20\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"90\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"10\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"50\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"lst\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"70\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"30\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"20\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"90\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"Remember that \",mdx(\"inlineCode\",{parentName:\"p\"},\"start\"),\" is inclusive, but \",mdx(\"inlineCode\",{parentName:\"p\"},\"end\"),\" is exclusive. Python will include the element of the \",mdx(\"inlineCode\",{parentName:\"p\"},\"start\"),\" index inside, but will stop just before the \",mdx(\"inlineCode\",{parentName:\"p\"},\"end\"),\" index. \")),mdx(\"p\",null,\"Omitting \",mdx(\"inlineCode\",{parentName:\"p\"},\"end\"),\" like \",mdx(\"inlineCode\",{parentName:\"p\"},\"list_name[start:]\"),` will make the code slice till the end of the list\nMeanwhile, omitting `,mdx(\"inlineCode\",{parentName:\"p\"},\"start\"),\", like \",mdx(\"inlineCode\",{parentName:\"p\"},\"list_name[:end]\"),\" will make the code slice from the beginning\"),mdx(\"p\",null,\"You can think of it as Python slicing a sandwich. If you wanted a chunk of the sandwich in the middle, you would define where to start and where to end. But, if you wanted the front end of the sandwich, you wouldn't cut at the beginning - you would just cut once in the middle and take the end. Or, if you want to get the back end of the sandwich, you would also cut in the middle, but not at the end. \"),mdx(\"h2\",a({},{id:\"indices-practice\"}),\"Indices Practice\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"nums \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"8\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"13\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"21\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"34\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"55\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\nanimals `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'cat'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'dog'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'cow'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'sheep'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'pig'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\nfruits `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'apple'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'banana'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'lemon'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'tomato'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"p\",null,\"Using the declarations above, evaluate:\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},mdx(\"inlineCode\",{parentName:\"li\"},\"nums[1]\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"inlineCode\",{parentName:\"li\"},\"animals[4]\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"inlineCode\",{parentName:\"li\"},\"fruits[-2]\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"inlineCode\",{parentName:\"li\"},\"nums[-1]\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"inlineCode\",{parentName:\"li\"},\"fruits[3]\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"inlineCode\",{parentName:\"li\"},\"nums[1:5]\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"inlineCode\",{parentName:\"li\"},\"animals[0:2]\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"inlineCode\",{parentName:\"li\"},\"fruits[1:]\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"inlineCode\",{parentName:\"li\"},\"nums[:5]\"))),mdx(\"details\",null,mdx(\"summary\",null,\" Answers: \"),\"1. 1 2. 'pig' 3. 'lemon' 4. 55 5. 'tomato' 6. [1, 2, 3, 5] 7. ['cat', 'dog'] 8. ['banana', 'lemon', 'tomato'] 9. [1, 1, 2, 3, 5]\"),mdx(\"h2\",a({},{id:\"len\"}),mdx(\"inlineCode\",{parentName:\"h2\"},\"len()\")),mdx(\"p\",null,\"To get the length of a list as an integer, you can use \",mdx(\"inlineCode\",{parentName:\"p\"},\"len()\"),\". \"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"my_list \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'a'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'b'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'c'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'d'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"len\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"my_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),`\n`)),mdx(\"p\",null,\"This also works for strings:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"my_str \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Hello World\"'),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"len\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"my_str\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"11\"),`\n`)),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"Remember that spaces are included in the length, along with other special symbols. However, the quotes \",mdx(\"inlineCode\",{parentName:\"p\"},'\"'),\" that surround strings are not included. \")),mdx(\"h2\",a({},{id:\"debug-printing-lists\"}),\"Debug-printing lists\"),mdx(\"p\",null,\"Lists can be directly printed out like this:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"my_list \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'a'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'b'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'c'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'d'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"my_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'a'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'b'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'c'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'d'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"p\",null,\"However, this might not be the best way you would like to present your information, since the format cannot be changed.\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"We call this \",mdx(\"strong\",{parentName:\"p\"},\"debug logging\"),\", since this would not be used in a real application; it's only for us to see what's going on in our code.\")),mdx(\"p\",null,\"One way to print out lists in a better way is to \",mdx(\"em\",{parentName:\"p\"},\"iterate\"),\" through each element and print them out individually.\"),mdx(\"h1\",a({},{id:\"iterating-through-lists\"}),\"Iterating through lists\"),mdx(\"p\",null,\"Iterating through lists can be useful to perform the same operation on every element of the list (such as \",mdx(\"inlineCode\",{parentName:\"p\"},\"print()\"),\", but could also be mathematical functions, checking for a condition, etc.)\"),mdx(\"p\",null,\"You already know how to use for loops to go through a series of numbers, so you could do the following to iterate (go through all the elements) through a list:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"my_list \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"orange\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"apple\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"pear\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"banana\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"kiwi\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"range\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"len\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"my_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"my_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),` orange\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),` apple\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),` pear\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),` banana\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),` kiwi\n`)),mdx(\"p\",null,\"In this example, we first create a for loop that iterates over the numbers from 0 to the length of the list. For \",mdx(\"inlineCode\",{parentName:\"p\"},\"my_list\"),\", the length is \",mdx(\"inlineCode\",{parentName:\"p\"},\"5\"),\", so the loop will iterate over \",mdx(\"inlineCode\",{parentName:\"p\"},\"0, 1, 2, 3, 4\"),\". \"),mdx(\"p\",null,\"Remember that we can do different operations on the list, like math:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"numbers \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"6\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"7\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"8\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"9\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"range\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"len\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"numbers\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    numbers`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"numbers\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"6\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"7\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"8\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"9\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"10\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"p\",null,\"Additionally, you don't need to iterate over the \",mdx(\"em\",{parentName:\"p\"},\"entire\"),\" list. For example, if you want to iterate over the first half of a list, you can do\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"range\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"len\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"numbers\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"/\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n`)),mdx(\"p\",null,\"However, if your list had an odd number of terms, you would need to adjust this depending on whether you want the greater half or the lesser half. \"),mdx(\"h2\",a({},{id:\"for-loop-short-syntax\"}),mdx(\"inlineCode\",{parentName:\"h2\"},\"for\"),\" loop short syntax\"),mdx(\"p\",null,\"Remember that \",mdx(\"inlineCode\",{parentName:\"p\"},\"for\"),\" loops don't just iterate over numbers. Instead, they can also iterate over lists directly:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"my_list \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"orange\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"apple\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"pear\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"banana\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"kiwi\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" my_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),` orange\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),` apple\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),` pear\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),` banana\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),` kiwi\n`)),mdx(\"p\",null,\"In the previous method, you were cycling through numbers, and using numbers to reference elements in the list. Now you are directly cycling through the elements of the list without having to worry about indices.\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\"You cannot use this type of loop to change the values inside a list.\"))),mdx(\"p\",null,\"However, you can use this method to change \",mdx(\"em\",{parentName:\"p\"},\"other\"),\" values, just not those inside the list. \"),mdx(\"h1\",a({},{id:\"list-methods--operations\"}),\"List Methods & Operations\"),mdx(\"p\",null,\"In the introduction, we talked about a grading system. You could define a bunch of variables for each grade the student receives - but what if the teacher inputs a new grade? You would run out. Fortunately, lists can change in size. \"),mdx(\"h2\",a({},{id:\"pop\"}),mdx(\"inlineCode\",{parentName:\"h2\"},\".pop()\")),mdx(\"p\",null,\"To delete a single element from a list, you can use the \",mdx(\"inlineCode\",{parentName:\"p\"},\".pop()\"),\" function. For example, \",mdx(\"inlineCode\",{parentName:\"p\"},\"letters.pop(2)\"),` deletes the item at the second index (3rd element).\nNotice that this shifts all indexes after the deleted item:`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Before: \",mdx(\"inlineCode\",{parentName:\"li\"},'letters[0] = \"a\", letters[1] = \"b\", letters[2] = \"c\", letters[3] = \"d\"')),mdx(\"li\",{parentName:\"ul\"},\"After: \",mdx(\"inlineCode\",{parentName:\"li\"},'letters[0] = \"a\", letters[1] = \"b\", letters[2] = \"d\"'))),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"letters \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"a\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"b\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"c\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"d\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\nletters`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"pop\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"letters\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'a'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'b'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'d'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"h2\",a({},{id:\"append\"}),mdx(\"inlineCode\",{parentName:\"h2\"},\".append()\")),mdx(\"p\",null,\"To add an element to the end of the list, you can use\",mdx(\"inlineCode\",{parentName:\"p\"},\" .append()\"),`.\nJust like `,mdx(\"inlineCode\",{parentName:\"p\"},\".pop()\"),\", use it after the name of the list, with the value you want to append.\"),mdx(\"p\",null,\"For example, to append \",mdx(\"inlineCode\",{parentName:\"p\"},\"'e'\"),\" to the end of the list \",mdx(\"inlineCode\",{parentName:\"p\"},\"letters\"),\", you can use \",mdx(\"inlineCode\",{parentName:\"p\"},\"letters.append('e')\")),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"letters \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'a'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'b'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'c'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'d'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\nletters`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"append\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'e'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"letters\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'a'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'b'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'c'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'d'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'e'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"h2\",a({},{id:\"list-operators--and-\"}),\"List Operators: * and +\"),mdx(\"p\",null,\"Similar to strings, \",mdx(\"inlineCode\",{parentName:\"p\"},\"+\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"*\"),\" can be used on lists. \"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"+\"),\" operator concatenates two lists together. This joins the two lists into one list, such as in the example below. \"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"*\"),\" operator repeats a list multiple times. \"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"word \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'racecar'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"word \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"*\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'racecar'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'racecar'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'racecar'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'racecar'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'racecar'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'bus'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'train'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'racecar'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'bus'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'train'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"6\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"6\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"p\",null,\"Notice that the values are not added together,  instead the lists are.\"),mdx(\"h2\",a({},{id:\"in\"}),mdx(\"inlineCode\",{parentName:\"h2\"},\"in\")),mdx(\"p\",null,\"While \",mdx(\"inlineCode\",{parentName:\"p\"},\"in\"),\" is a keyword when writing \",mdx(\"inlineCode\",{parentName:\"p\"},\"for\"),` loops, you can also use it to check whether an element is present in the list.\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"in\"),\" returns \",mdx(\"inlineCode\",{parentName:\"p\"},\"True\"),\" if the value is in the list/string and \",mdx(\"inlineCode\",{parentName:\"p\"},\"False\"),\" if the value is not.\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"my_list \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'a'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'b'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'c'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'d'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'a'\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" my_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"True\"),`\n`)),mdx(\"p\",null,\"This also works for strings:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"my_str \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Hello World\"'),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'o'\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Hello World\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"True\"),`\n`)),mdx(\"h1\",a({},{id:\"tuples\"}),\"Tuples\"),mdx(\"p\",null,\"While you explore more libraries, you will find that many functions return a special data type called a \",mdx(\"strong\",{parentName:\"p\"},\"tuple\"),\". Tuples are declared like lists, but use \",mdx(\"inlineCode\",{parentName:\"p\"},\"()\"),\" instead of \",mdx(\"inlineCode\",{parentName:\"p\"},\"[]\"),\".\"),mdx(\"p\",null,\"These data types behave like lists, but are \",mdx(\"strong\",{parentName:\"p\"},\"immutable*\"),\" \",mdx(\"em\",{parentName:\"p\"},\"(cannot be changed)\"),\". Therfore, you cannot reassign values in a tuple, and the size of a tuple cannot change.\"),mdx(\"p\",null,\"Reference a tuple's elements just like you would in a list:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"my_tuple \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"apple\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"my_tuple\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),` apple\n`)),mdx(\"p\",null,\"Keywords like \",mdx(\"inlineCode\",{parentName:\"p\"},\"in\"),\" and functions like \",mdx(\"inlineCode\",{parentName:\"p\"},\"len()\"),\" can also be used on tuples\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"animals \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"pig\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"cow\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"sheep\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"cow\"'),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" animals\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"True\"),`\n`)),mdx(\"p\",null,\"You can use \",mdx(\"inlineCode\",{parentName:\"p\"},\"list()\"),\" to convert a tuple to a list\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"animals \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"pig\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"cow\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"sheep\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"animals\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"list\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"animals\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'cow'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'pig'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'sheep'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'cow'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'pig'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'sheep'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n\n`)),mdx(\"h1\",a({},{id:\"list-input-and-output\"}),\"List Input and Output\"),mdx(\"h2\",a({},{id:\"input-with-lists\"}),\"Input with Lists\"),mdx(\"p\",null,\"You cannot directly input lists with \",mdx(\"inlineCode\",{parentName:\"p\"},\"input()\"),\", since \",mdx(\"inlineCode\",{parentName:\"p\"},\"input()\"),\" accepts everything as a string, rather than another data type. \"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"my_input \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"input\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Enter input: \"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"type\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"my_input\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\nEnter `,mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"input\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"class\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'str'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),`\n`)),mdx(\"p\",null,\"Instead, you can have the user input each element of the list with a space in between, using the \",mdx(\"inlineCode\",{parentName:\"p\"},\".split()\"),\" method on \",mdx(\"inlineCode\",{parentName:\"p\"},\"input()\"),\".\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"my_input \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"input\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Enter input: \"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"split\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"type\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"my_input\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"my_input\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" Enter \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"input\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"class\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'list'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'1'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'2'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'3'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"p\",null,\"If you put nothing in \",mdx(\"inlineCode\",{parentName:\"p\"},\".split()\"),\", it will split the string by spaces. However, you can choose to include a string inside of \",mdx(\"inlineCode\",{parentName:\"p\"},\".split()\"),\" to tell it what to split by.\"),mdx(\"h2\",a({},{id:\"multiline-input\"}),\"Multiline Input\"),mdx(\"p\",null,\"Another method of inputting values into a list could be on multiple lines, using \",mdx(\"inlineCode\",{parentName:\"p\"},\"input()\"),\" many times with a loop.\"),mdx(\"p\",null,\"In this method, we can use a loop, after getting how many elements will be inputted.\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"reps \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"input\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"How many inputs? \"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\nmy_list `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"range\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"reps\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    ele `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"input\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    my_list`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"append\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"ele\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"my_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" How many inputs? \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'1'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'2'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'3'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"h2\",a({},{id:\"casting-an-entire-list\"}),\"Casting an Entire List\"),mdx(\"p\",null,\"Notice that when you used \",mdx(\"inlineCode\",{parentName:\"p\"},\"input().split()\"),\" to get inputs into a list from the user, everything was a string.\"),mdx(\"p\",null,\"However, you can't use \",mdx(\"inlineCode\",{parentName:\"p\"},\"int()\"),\" on \",mdx(\"inlineCode\",{parentName:\"p\"},\"input()\"),\" like earlier, since \",mdx(\"inlineCode\",{parentName:\"p\"},\"int()\"),\" cannot cast spaces and other formatting.\"),mdx(\"p\",null,\"One way to do this is to \",mdx(\"em\",{parentName:\"p\"},\"iterate\"),\" through each element, and change their type one by one.\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"vals \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"1\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"2\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"4\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"3\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"vals\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" v \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"range\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"len\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"vals\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    vals`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"v\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"int\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"vals\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"v\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"vals\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'1'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'2'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'4'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'3'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"h2\",a({},{id:\"outputting-a-list\"}),\"Outputting a list\"),mdx(\"p\",null,\"When using \",mdx(\"inlineCode\",{parentName:\"p\"},\"print()\"),\" on a list, you'll notice that it prints it with brackets and commas.\"),mdx(\"p\",null,\"If you don't want that, you can do\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"str\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"join\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"list_name\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`)),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"str\"),\" is what should be in between the printed elements, usually \",mdx(\"inlineCode\",{parentName:\"p\"},\"' '\"),\" for our purposes:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"words \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"quickly\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"scurry\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"and\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"find\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"freedom\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\nsentence `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"' '\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"join\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"words\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"sentence\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\nother_sentence `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"', '\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"join\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"words\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"other_sentence\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" quickly scurry \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"and\"),` find freedom\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" quickly\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" scurry\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"and\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" find\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),` freedom\n`)),mdx(\"h1\",a({},{id:\"multidimensional-lists\"}),\"Multidimensional Lists\"),mdx(\"p\",null,\"Lists can also have multiple dimensions (2D, 3D, 4D).  You can do this by putting lists inside of lists, like this:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"r1c1\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"r1c2\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"r2c1\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"r2c2\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",a({parentName:\"tr\"},{align:\"center\"})),mdx(\"th\",a({parentName:\"tr\"},{align:\"center\"}),\"Element  0\"),mdx(\"th\",a({parentName:\"tr\"},{align:\"center\"}),\"Element 1\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"List 0\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),'\"r1c1\"'),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),'\"r1c2\"')),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"List 1\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),'\"r2c1\"'),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),'\"r2c2\"')))),mdx(\"p\",null,'This list has two lists inside of it that are two elements long (it is \"2 by 2\"). It behaves like a 2-dimensional table, with rows and columns.'),mdx(\"p\",null,\"Elements can be addressed by indexing twice (\",mdx(\"inlineCode\",{parentName:\"p\"},\"my_list[row][col]\"),\")\"),mdx(\"p\",null,\"Multidimensional lists can be used to model many real-world things. Tables and graphs are all 2-dimensional data that can be modeled with multidimensional lists\"),mdx(\"p\",null,`You can also make 3, 4, and 5 dimensional lists (and so on)\nPut list inside of lists inside of lists until you have achieved the number of desired dimensions.`),mdx(\"h2\",a({},{id:\"example\"}),\"Example\"),mdx(\"p\",null,\"We can use 2D lists to represent more complex situations, a seating chart through a multidimensional list:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"seating_chart \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Nobody\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Tim\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Sally\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Ben\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Arnav\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Jason\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Mary\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Rav\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Aditya\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Nobody\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Samantha\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Lee\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Joshua\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Tyrone\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Adam\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Aarav\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Ethan\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Lilly\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Daryl\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Danny\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# Print the person sitting in the first row and first column\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"seating_chart\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),` Nobody\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# Print the person sitting in the third row and fourth column\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"seating_chart\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),` Lee\n`)),mdx(\"p\",null,\"In this way, we can represnet much more complex situations. Think of a map of the city - each element in a list could represent a building, with its position representing where the building is in a city. \"),mdx(\"h2\",a({},{id:\"iterating-through-multidimensional-lists\"}),\"Iterating through multidimensional lists\"),mdx(\"p\",null,\"You can iteratively print values of a list:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"range\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"len\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"list\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),` \n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`)),mdx(\"p\",null,\"However, if you did this using a multidimensional list, it would print simply the lists inside, rather than each individual value:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"two_d_list \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"6\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"7\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"8\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"9\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"range\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"len\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"two_d_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"two_d_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    \n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"6\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"7\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"8\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"9\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"p\",null,\"We can solve this with nested loops. A nested loop can iterate through multidimensional lists. The list \",mdx(\"inlineCode\",{parentName:\"p\"},\"[1, 2, 3]\"),\" inside \",mdx(\"strong\",{parentName:\"p\"},\"two_d_list\"),\" is actually \",mdx(\"inlineCode\",{parentName:\"p\"},\"two_d_list[0]\"),\". Similarly, \",mdx(\"inlineCode\",{parentName:\"p\"},\"[4, 5, 6]\"),\" is \",mdx(\"inlineCode\",{parentName:\"p\"},\"two_d_list[1]\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"[7, 8, 9]\"),\" is \",mdx(\"inlineCode\",{parentName:\"p\"},\"two_d_list[2]\"),\".\"),mdx(\"p\",null,\"An outer loop will retrieve the lists inside the combined list, while the inner loop will retrieve the values inside the inner lists.\"),mdx(\"p\",null,\"The inner loop will iterate through \",mdx(\"inlineCode\",{parentName:\"p\"},\"two_d_list[i]\"),\", or every list that is inside the combined list:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"two_d_list \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"6\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"7\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"8\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"9\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"range\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"len\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"two_d_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" j \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"range\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"len\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"two_d_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# New - prints on the same line\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"two_d_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"j\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" end \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \\u201C \\u201D\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# Have we reached the last element?\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# Then prints a new line\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" j \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"==\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"len\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"two_d_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"-\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n            `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"\\u201C\\u201D\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"6\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"7\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"8\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"9\"),`\n`)),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",a({parentName:\"tr\"},{align:\"center\"}),\"Iteration\"),mdx(\"th\",a({parentName:\"tr\"},{align:\"center\"}),\"Value of loop variables\"),mdx(\"th\",a({parentName:\"tr\"},{align:\"center\"}),\"Value printed\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"1\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"i = 0, j = 0\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"1\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"1\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"i = 0, j = 1\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"2\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"1\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"i = 0, j = 2\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"3\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"2\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"i = 1, j = 0\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"4\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"2\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"i = 1, j = 1\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"5\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"2\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"i = 1, j = 2\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"6\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"3\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"i = 2, j = 0\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"7\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"3\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"i = 2, j = 1\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"8\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"3\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"i = 2, j = 2\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"9\")))),mdx(\"p\",null,\"Here's a trace table of the example represented earlier, that shows what each for loop is going through. \"),mdx(\"h1\",a({},{id:\"list-methods\"}),\"List Methods\"),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",a({parentName:\"tr\"},{align:\"center\"}),\"Function\"),mdx(\"th\",a({parentName:\"tr\"},{align:\"center\"}),\"Usage\"),mdx(\"th\",a({parentName:\"tr\"},{align:\"center\"}),\"Example\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"len()\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"Returns the length of the list\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"len(\",\"[0, 1, 2]\",\") returns 3\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"max()\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"Returns the largest value of the list\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"max(\",\"[1, 9, 3]\",\") returns 9\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"min()\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"Returns the smallest value of the list\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"min(\",\"[1, 9, 3]\",\") returns 1\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\".pop()\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"Removes the element at the specified index, then returns it\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"[1, 2, 3]\",\".pop(1) returns 2\\vand changes list to \",\"[1, 3]\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\".append()\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"Adds the element to the end of the list\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"[1, 2, 3]\",\".append(4) changes list to \",\"[1, 2, 3, 4]\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\".sort()\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"Sorts the list from least to greatest\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"[5, 6, 2]\",\".sort() changes list to \",\"[2, 5, 6]\")))),mdx(\"h1\",a({},{id:\"vocabulary\"}),\"Vocabulary\"),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",a({parentName:\"tr\"},{align:\"center\"}),\"Word\"),mdx(\"th\",a({parentName:\"tr\"},{align:\"center\"}),\"Definition\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"List\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"An organized and mutable (changeable) sequence of items\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"Tuple\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"An organized but immutable (unchangeable) sequence of items\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"Element\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"The items inside of a list (like each shelf in a bookshelf)\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"Index\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"The position of an element inside of a list\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"Slicing\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"The process of creating a list by taking a part of one that already exists\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"Mutable/Immutable\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"An object that can be changed / cannot be changed.\",mdx(\"br\",null),\"Lists are mutable, tuples are immutable.\")))))}MDXContent.isMDXComponent=!0;\n","scope":{}},"headings":[{"level":1,"text":"What are lists?","slug":"what-are-lists","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var u=(t,o,n)=>o in t?M(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,a=(t,o)=>{for(var n in o||(o={}))r.call(o,n)&&u(t,n,o[n]);if(p)for(var n of p(o))s.call(o,n)&&u(t,n,o[n]);return t},y=(t,o)=>X(t,c(o));var D=(t,o)=>{var n={};for(var e in t)r.call(t,e)&&o.indexOf(e)<0&&(n[e]=t[e]);if(t!=null&&p)for(var e of p(t))o.indexOf(e)<0&&s.call(t,e)&&(n[e]=t[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:t}=e,o=D(e,[\"components\"]);return mdx(MDXLayout,y(a(a({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"What are lists?\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Syntax","slug":"syntax","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var e=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var y=(t,o,n)=>o in t?M(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,u=(t,o)=>{for(var n in o||(o={}))a.call(o,n)&&y(t,n,o[n]);if(e)for(var n of e(o))r.call(o,n)&&y(t,n,o[n]);return t},s=(t,o)=>X(t,c(o));var D=(t,o)=>{var n={};for(var p in t)a.call(t,p)&&o.indexOf(p)<0&&(n[p]=t[p]);if(t!=null&&e)for(var p of e(t))o.indexOf(p)<0&&r.call(t,p)&&(n[p]=t[p]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var p=n,{components:t}=p,o=D(p,[\"components\"]);return mdx(MDXLayout,s(u(u({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Syntax\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Why Use Lists?","slug":"why-use-lists","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var u=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var y=(t,o,n)=>o in t?M(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,s=(t,o)=>{for(var n in o||(o={}))u.call(o,n)&&y(t,n,o[n]);if(p)for(var n of p(o))r.call(o,n)&&y(t,n,o[n]);return t},a=(t,o)=>X(t,c(o));var D=(t,o)=>{var n={};for(var e in t)u.call(t,e)&&o.indexOf(e)<0&&(n[e]=t[e]);if(t!=null&&p)for(var e of p(t))o.indexOf(e)<0&&r.call(t,e)&&(n[e]=t[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:t}=e,o=D(e,[\"components\"]);return mdx(MDXLayout,a(s(s({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Why Use Lists?\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Indices","slug":"indices","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var a=(o,t,n)=>t in o?D(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,u=(o,t)=>{for(var n in t||(t={}))r.call(t,n)&&a(o,n,t[n]);if(p)for(var n of p(t))s.call(t,n)&&a(o,n,t[n]);return o},c=(o,t)=>M(o,X(t));var y=(o,t)=>{var n={};for(var e in o)r.call(o,e)&&t.indexOf(e)<0&&(n[e]=o[e]);if(o!=null&&p)for(var e of p(o))t.indexOf(e)<0&&s.call(o,e)&&(n[e]=o[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:o}=e,t=y(e,[\"components\"]);return mdx(MDXLayout,c(u(u({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Indices\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Negative indices","slug":"negative-indices","md":{"compiledSource":"var y=Object.defineProperty,D=Object.defineProperties;var M=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var s=(t,o,n)=>o in t?y(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,u=(t,o)=>{for(var n in o||(o={}))a.call(o,n)&&s(t,n,o[n]);if(p)for(var n of p(o))r.call(o,n)&&s(t,n,o[n]);return t},c=(t,o)=>D(t,M(o));var i=(t,o)=>{var n={};for(var e in t)a.call(t,e)&&o.indexOf(e)<0&&(n[e]=t[e]);if(t!=null&&p)for(var e of p(t))o.indexOf(e)<0&&r.call(t,e)&&(n[e]=t[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:t}=e,o=i(e,[\"components\"]);return mdx(MDXLayout,c(u(u({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Negative indices\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Getting and Setting Elements","slug":"getting-and-setting-elements","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var s=(t,n,o)=>n in t?M(t,n,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[n]=o,u=(t,n)=>{for(var o in n||(n={}))a.call(n,o)&&s(t,o,n[o]);if(p)for(var o of p(n))r.call(n,o)&&s(t,o,n[o]);return t},y=(t,n)=>X(t,c(n));var D=(t,n)=>{var o={};for(var e in t)a.call(t,e)&&n.indexOf(e)<0&&(o[e]=t[e]);if(t!=null&&p)for(var e of p(t))n.indexOf(e)<0&&r.call(t,e)&&(o[e]=t[e]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var e=o,{components:t}=e,n=D(e,[\"components\"]);return mdx(MDXLayout,y(u(u({},layoutProps),n),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Getting and Setting Elements\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"IndexError","slug":"indexerror","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var e=Object.getOwnPropertySymbols;var u=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;var s=(o,t,n)=>t in o?M(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,p=(o,t)=>{for(var n in t||(t={}))u.call(t,n)&&s(o,n,t[n]);if(e)for(var n of e(t))a.call(t,n)&&s(o,n,t[n]);return o},y=(o,t)=>X(o,c(t));var D=(o,t)=>{var n={};for(var r in o)u.call(o,r)&&t.indexOf(r)<0&&(n[r]=o[r]);if(o!=null&&e)for(var r of e(o))t.indexOf(r)<0&&a.call(o,r)&&(n[r]=o[r]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var r=n,{components:o}=r,t=D(r,[\"components\"]);return mdx(MDXLayout,y(p(p({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"IndexError\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"List Slicing","slug":"list-slicing","md":{"compiledSource":"var y=Object.defineProperty,D=Object.defineProperties;var M=Object.getOwnPropertyDescriptors;var e=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var a=(t,o,n)=>o in t?y(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,u=(t,o)=>{for(var n in o||(o={}))r.call(o,n)&&a(t,n,o[n]);if(e)for(var n of e(o))s.call(o,n)&&a(t,n,o[n]);return t},c=(t,o)=>D(t,M(o));var i=(t,o)=>{var n={};for(var p in t)r.call(t,p)&&o.indexOf(p)<0&&(n[p]=t[p]);if(t!=null&&e)for(var p of e(t))o.indexOf(p)<0&&s.call(t,p)&&(n[p]=t[p]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var p=n,{components:t}=p,o=i(p,[\"components\"]);return mdx(MDXLayout,c(u(u({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"List Slicing\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Indices Practice","slug":"indices-practice","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable;var a=(t,o,n)=>o in t?D(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,c=(t,o)=>{for(var n in o||(o={}))r.call(o,n)&&a(t,n,o[n]);if(p)for(var n of p(o))u.call(o,n)&&a(t,n,o[n]);return t},s=(t,o)=>M(t,X(o));var y=(t,o)=>{var n={};for(var e in t)r.call(t,e)&&o.indexOf(e)<0&&(n[e]=t[e]);if(t!=null&&p)for(var e of p(t))o.indexOf(e)<0&&u.call(t,e)&&(n[e]=t[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:t}=e,o=y(e,[\"components\"]);return mdx(MDXLayout,s(c(c({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Indices Practice\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"`len()`","slug":"len","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable;var i=(n,o,e)=>o in n?D(n,o,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[o]=e,a=(n,o)=>{for(var e in o||(o={}))r.call(o,e)&&i(n,e,o[e]);if(p)for(var e of p(o))u.call(o,e)&&i(n,e,o[e]);return n},s=(n,o)=>M(n,X(o));var y=(n,o)=>{var e={};for(var t in n)r.call(n,t)&&o.indexOf(t)<0&&(e[t]=n[t]);if(n!=null&&p)for(var t of p(n))o.indexOf(t)<0&&u.call(n,t)&&(e[t]=n[t]);return e};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(e){var t=e,{components:n}=t,o=y(t,[\"components\"]);return mdx(MDXLayout,s(a(a({},layoutProps),o),{components:n,mdxType:\"MDXLayout\"}),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"len()\")))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Debug-printing lists","slug":"debug-printing-lists","md":{"compiledSource":"var y=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var e=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var D=(t,n,o)=>n in t?y(t,n,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[n]=o,u=(t,n)=>{for(var o in n||(n={}))r.call(n,o)&&D(t,o,n[o]);if(e)for(var o of e(n))s.call(n,o)&&D(t,o,n[o]);return t},a=(t,n)=>M(t,X(n));var i=(t,n)=>{var o={};for(var p in t)r.call(t,p)&&n.indexOf(p)<0&&(o[p]=t[p]);if(t!=null&&e)for(var p of e(t))n.indexOf(p)<0&&s.call(t,p)&&(o[p]=t[p]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var p=o,{components:t}=p,n=i(p,[\"components\"]);return mdx(MDXLayout,a(u(u({},layoutProps),n),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Debug-printing lists\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Iterating through lists","slug":"iterating-through-lists","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var u=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var a=(t,o,n)=>o in t?M(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,r=(t,o)=>{for(var n in o||(o={}))u.call(o,n)&&a(t,n,o[n]);if(p)for(var n of p(o))s.call(o,n)&&a(t,n,o[n]);return t},y=(t,o)=>X(t,c(o));var D=(t,o)=>{var n={};for(var e in t)u.call(t,e)&&o.indexOf(e)<0&&(n[e]=t[e]);if(t!=null&&p)for(var e of p(t))o.indexOf(e)<0&&s.call(t,e)&&(n[e]=t[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:t}=e,o=D(e,[\"components\"]);return mdx(MDXLayout,y(r(r({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Iterating through lists\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"`for` loop short syntax","slug":"for-loop-short-syntax","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var u=(o,n,t)=>n in o?D(o,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[n]=t,r=(o,n)=>{for(var t in n||(n={}))a.call(n,t)&&u(o,t,n[t]);if(p)for(var t of p(n))s.call(n,t)&&u(o,t,n[t]);return o},i=(o,n)=>M(o,X(n));var y=(o,n)=>{var t={};for(var e in o)a.call(o,e)&&n.indexOf(e)<0&&(t[e]=o[e]);if(o!=null&&p)for(var e of p(o))n.indexOf(e)<0&&s.call(o,e)&&(t[e]=o[e]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var e=t,{components:o}=e,n=y(e,[\"components\"]);return mdx(MDXLayout,i(r(r({},layoutProps),n),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"for\"),\" loop short syntax\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"List Methods & Operations","slug":"list-methods--operations","md":{"compiledSource":"var D=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable;var a=(t,o,n)=>o in t?D(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,s=(t,o)=>{for(var n in o||(o={}))r.call(o,n)&&a(t,n,o[n]);if(p)for(var n of p(o))u.call(o,n)&&a(t,n,o[n]);return t},M=(t,o)=>X(t,c(o));var y=(t,o)=>{var n={};for(var e in t)r.call(t,e)&&o.indexOf(e)<0&&(n[e]=t[e]);if(t!=null&&p)for(var e of p(t))o.indexOf(e)<0&&u.call(t,e)&&(n[e]=t[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:t}=e,o=y(e,[\"components\"]);return mdx(MDXLayout,M(s(s({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"List Methods & Operations\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"`.pop()`","slug":"pop","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable;var i=(n,o,t)=>o in n?D(n,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[o]=t,a=(n,o)=>{for(var t in o||(o={}))r.call(o,t)&&i(n,t,o[t]);if(p)for(var t of p(o))u.call(o,t)&&i(n,t,o[t]);return n},s=(n,o)=>M(n,X(o));var y=(n,o)=>{var t={};for(var e in n)r.call(n,e)&&o.indexOf(e)<0&&(t[e]=n[e]);if(n!=null&&p)for(var e of p(n))o.indexOf(e)<0&&u.call(n,e)&&(t[e]=n[e]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var e=t,{components:n}=e,o=y(e,[\"components\"]);return mdx(MDXLayout,s(a(a({},layoutProps),o),{components:n,mdxType:\"MDXLayout\"}),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\".pop()\")))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"`.append()`","slug":"append","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable;var i=(n,o,e)=>o in n?D(n,o,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[o]=e,a=(n,o)=>{for(var e in o||(o={}))r.call(o,e)&&i(n,e,o[e]);if(p)for(var e of p(o))u.call(o,e)&&i(n,e,o[e]);return n},s=(n,o)=>M(n,X(o));var y=(n,o)=>{var e={};for(var t in n)r.call(n,t)&&o.indexOf(t)<0&&(e[t]=n[t]);if(n!=null&&p)for(var t of p(n))o.indexOf(t)<0&&u.call(n,t)&&(e[t]=n[t]);return e};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(e){var t=e,{components:n}=t,o=y(t,[\"components\"]);return mdx(MDXLayout,s(a(a({},layoutProps),o),{components:n,mdxType:\"MDXLayout\"}),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\".append()\")))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"List Operators: * and +","slug":"list-operators--and-","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var e=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var u=(t,o,n)=>o in t?M(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,r=(t,o)=>{for(var n in o||(o={}))a.call(o,n)&&u(t,n,o[n]);if(e)for(var n of e(o))s.call(o,n)&&u(t,n,o[n]);return t},y=(t,o)=>X(t,c(o));var D=(t,o)=>{var n={};for(var p in t)a.call(t,p)&&o.indexOf(p)<0&&(n[p]=t[p]);if(t!=null&&e)for(var p of e(t))o.indexOf(p)<0&&s.call(t,p)&&(n[p]=t[p]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var p=n,{components:t}=p,o=D(p,[\"components\"]);return mdx(MDXLayout,y(r(r({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"List Operators: * and +\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"`in`","slug":"in","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var u=(n,o,t)=>o in n?D(n,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[o]=t,a=(n,o)=>{for(var t in o||(o={}))i.call(o,t)&&u(n,t,o[t]);if(p)for(var t of p(o))r.call(o,t)&&u(n,t,o[t]);return n},s=(n,o)=>M(n,X(o));var y=(n,o)=>{var t={};for(var e in n)i.call(n,e)&&o.indexOf(e)<0&&(t[e]=n[e]);if(n!=null&&p)for(var e of p(n))o.indexOf(e)<0&&r.call(n,e)&&(t[e]=n[e]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var e=t,{components:n}=e,o=y(e,[\"components\"]);return mdx(MDXLayout,s(a(a({},layoutProps),o),{components:n,mdxType:\"MDXLayout\"}),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"in\")))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Tuples","slug":"tuples","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var e=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var a=(o,t,n)=>t in o?M(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,u=(o,t)=>{for(var n in t||(t={}))r.call(t,n)&&a(o,n,t[n]);if(e)for(var n of e(t))s.call(t,n)&&a(o,n,t[n]);return o},y=(o,t)=>X(o,c(t));var D=(o,t)=>{var n={};for(var p in o)r.call(o,p)&&t.indexOf(p)<0&&(n[p]=o[p]);if(o!=null&&e)for(var p of e(o))t.indexOf(p)<0&&s.call(o,p)&&(n[p]=o[p]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var p=n,{components:o}=p,t=D(p,[\"components\"]);return mdx(MDXLayout,y(u(u({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Tuples\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"List Input and Output","slug":"list-input-and-output","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var u=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var s=(t,n,o)=>n in t?M(t,n,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[n]=o,e=(t,n)=>{for(var o in n||(n={}))a.call(n,o)&&s(t,o,n[o]);if(u)for(var o of u(n))r.call(n,o)&&s(t,o,n[o]);return t},y=(t,n)=>X(t,c(n));var D=(t,n)=>{var o={};for(var p in t)a.call(t,p)&&n.indexOf(p)<0&&(o[p]=t[p]);if(t!=null&&u)for(var p of u(t))n.indexOf(p)<0&&r.call(t,p)&&(o[p]=t[p]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var p=o,{components:t}=p,n=D(p,[\"components\"]);return mdx(MDXLayout,y(e(e({},layoutProps),n),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"List Input and Output\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Input with Lists","slug":"input-with-lists","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var u=Object.getOwnPropertySymbols;var s=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var a=(t,o,n)=>o in t?M(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,e=(t,o)=>{for(var n in o||(o={}))s.call(o,n)&&a(t,n,o[n]);if(u)for(var n of u(o))r.call(o,n)&&a(t,n,o[n]);return t},y=(t,o)=>X(t,c(o));var D=(t,o)=>{var n={};for(var p in t)s.call(t,p)&&o.indexOf(p)<0&&(n[p]=t[p]);if(t!=null&&u)for(var p of u(t))o.indexOf(p)<0&&r.call(t,p)&&(n[p]=t[p]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var p=n,{components:t}=p,o=D(p,[\"components\"]);return mdx(MDXLayout,y(e(e({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Input with Lists\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Multiline Input","slug":"multiline-input","md":{"compiledSource":"var D=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var u=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,M=Object.prototype.propertyIsEnumerable;var a=(t,n,o)=>n in t?D(t,n,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[n]=o,e=(t,n)=>{for(var o in n||(n={}))r.call(n,o)&&a(t,o,n[o]);if(u)for(var o of u(n))M.call(n,o)&&a(t,o,n[o]);return t},s=(t,n)=>X(t,c(n));var y=(t,n)=>{var o={};for(var p in t)r.call(t,p)&&n.indexOf(p)<0&&(o[p]=t[p]);if(t!=null&&u)for(var p of u(t))n.indexOf(p)<0&&M.call(t,p)&&(o[p]=t[p]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var p=o,{components:t}=p,n=y(p,[\"components\"]);return mdx(MDXLayout,s(e(e({},layoutProps),n),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Multiline Input\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Casting an Entire List","slug":"casting-an-entire-list","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var u=(t,n,o)=>n in t?D(t,n,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[n]=o,a=(t,n)=>{for(var o in n||(n={}))r.call(n,o)&&u(t,o,n[o]);if(p)for(var o of p(n))s.call(n,o)&&u(t,o,n[o]);return t},i=(t,n)=>M(t,X(n));var y=(t,n)=>{var o={};for(var e in t)r.call(t,e)&&n.indexOf(e)<0&&(o[e]=t[e]);if(t!=null&&p)for(var e of p(t))n.indexOf(e)<0&&s.call(t,e)&&(o[e]=t[e]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var e=o,{components:t}=e,n=y(e,[\"components\"]);return mdx(MDXLayout,i(a(a({},layoutProps),n),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Casting an Entire List\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Outputting a list","slug":"outputting-a-list","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var u=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var s=(t,o,n)=>o in t?M(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,e=(t,o)=>{for(var n in o||(o={}))a.call(o,n)&&s(t,n,o[n]);if(u)for(var n of u(o))r.call(o,n)&&s(t,n,o[n]);return t},y=(t,o)=>X(t,c(o));var D=(t,o)=>{var n={};for(var p in t)a.call(t,p)&&o.indexOf(p)<0&&(n[p]=t[p]);if(t!=null&&u)for(var p of u(t))o.indexOf(p)<0&&r.call(t,p)&&(n[p]=t[p]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var p=n,{components:t}=p,o=D(p,[\"components\"]);return mdx(MDXLayout,y(e(e({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Outputting a list\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Multidimensional Lists","slug":"multidimensional-lists","md":{"compiledSource":"var y=Object.defineProperty,D=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var u=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;var i=(t,o,n)=>o in t?y(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,s=(t,o)=>{for(var n in o||(o={}))u.call(o,n)&&i(t,n,o[n]);if(p)for(var n of p(o))a.call(o,n)&&i(t,n,o[n]);return t},r=(t,o)=>D(t,X(o));var M=(t,o)=>{var n={};for(var e in t)u.call(t,e)&&o.indexOf(e)<0&&(n[e]=t[e]);if(t!=null&&p)for(var e of p(t))o.indexOf(e)<0&&a.call(t,e)&&(n[e]=t[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:t}=e,o=M(e,[\"components\"]);return mdx(MDXLayout,r(s(s({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Multidimensional Lists\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Example","slug":"example","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var e=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var s=(o,t,n)=>t in o?M(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,u=(o,t)=>{for(var n in t||(t={}))a.call(t,n)&&s(o,n,t[n]);if(e)for(var n of e(t))r.call(t,n)&&s(o,n,t[n]);return o},y=(o,t)=>X(o,c(t));var D=(o,t)=>{var n={};for(var p in o)a.call(o,p)&&t.indexOf(p)<0&&(n[p]=o[p]);if(o!=null&&e)for(var p of e(o))t.indexOf(p)<0&&r.call(o,p)&&(n[p]=o[p]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var p=n,{components:o}=p,t=D(p,[\"components\"]);return mdx(MDXLayout,y(u(u({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Example\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Iterating through multidimensional lists","slug":"iterating-through-multidimensional-lists","md":{"compiledSource":"var y=Object.defineProperty,D=Object.defineProperties;var M=Object.getOwnPropertyDescriptors;var u=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var a=(t,o,n)=>o in t?y(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,p=(t,o)=>{for(var n in o||(o={}))r.call(o,n)&&a(t,n,o[n]);if(u)for(var n of u(o))s.call(o,n)&&a(t,n,o[n]);return t},i=(t,o)=>D(t,M(o));var m=(t,o)=>{var n={};for(var e in t)r.call(t,e)&&o.indexOf(e)<0&&(n[e]=t[e]);if(t!=null&&u)for(var e of u(t))o.indexOf(e)<0&&s.call(t,e)&&(n[e]=t[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:t}=e,o=m(e,[\"components\"]);return mdx(MDXLayout,i(p(p({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Iterating through multidimensional lists\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"List Methods","slug":"list-methods","md":{"compiledSource":"var D=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var u=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var M=(t,o,n)=>o in t?D(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,s=(t,o)=>{for(var n in o||(o={}))u.call(o,n)&&M(t,n,o[n]);if(p)for(var n of p(o))r.call(o,n)&&M(t,n,o[n]);return t},a=(t,o)=>X(t,c(o));var y=(t,o)=>{var n={};for(var e in t)u.call(t,e)&&o.indexOf(e)<0&&(n[e]=t[e]);if(t!=null&&p)for(var e of p(t))o.indexOf(e)<0&&r.call(t,e)&&(n[e]=t[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:t}=e,o=y(e,[\"components\"]);return mdx(MDXLayout,a(s(s({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"List Methods\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Vocabulary","slug":"vocabulary","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var u=Object.getOwnPropertySymbols;var e=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var y=(o,t,n)=>t in o?D(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,a=(o,t)=>{for(var n in t||(t={}))e.call(t,n)&&y(o,n,t[n]);if(u)for(var n of u(t))r.call(t,n)&&y(o,n,t[n]);return o},c=(o,t)=>M(o,X(t));var s=(o,t)=>{var n={};for(var p in o)e.call(o,p)&&t.indexOf(p)<0&&(n[p]=o[p]);if(o!=null&&u)for(var p of u(o))t.indexOf(p)<0&&r.call(o,p)&&(n[p]=o[p]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var p=n,{components:o}=p,t=s(p,[\"components\"]);return mdx(MDXLayout,c(a(a({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Vocabulary\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}}]},"__N_SSG":true}