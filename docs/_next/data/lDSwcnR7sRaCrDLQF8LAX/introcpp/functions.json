{"pageProps":{"courseData":{"href":"introcpp","difficulty":"Beginner","name":"Introduction to C++"},"walkthroughData":{"lessons":[{"name":"Introduction","href":"introduction"},{"name":"Variables and Data Types","href":"variables"},{"name":"Console I/O","href":"consoleio"},{"name":"Arithmetic Operations","href":"arithmetic"},{"name":"Control Structures: Conditionals","href":"conditionals"},{"name":"Control Structures: Loops","href":"loops"},{"name":"Arrays","href":"arrays"},{"name":"Functions","href":"functions"},{"name":"C++ Standard Library (STL)","href":"cppstandardlibrary"}],"wipLessons":[{"name":"Debugging","href":"debugging"}]},"lessonData":{"name":"Functions","href":"functions"},"mdContent":{"compiledSource":"var d=Object.defineProperty,u=Object.defineProperties;var l=Object.getOwnPropertyDescriptors;var t=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;var m=(e,n,s)=>n in e?d(e,n,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[n]=s,a=(e,n)=>{for(var s in n||(n={}))o.call(n,s)&&m(e,s,n[s]);if(t)for(var s of t(n))c.call(n,s)&&m(e,s,n[s]);return e},r=(e,n)=>u(e,l(n));var N=(e,n)=>{var s={};for(var p in e)o.call(e,p)&&n.indexOf(p)<0&&(s[p]=e[p]);if(e!=null&&t)for(var p of t(e))n.indexOf(p)<0&&c.call(e,p)&&(s[p]=e[p]);return s};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(s){var p=s,{components:e}=p,n=N(p,[\"components\"]);return mdx(MDXLayout,r(a(a({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"You've already used functions in the past. One of their biggest advantages is reusability - for example, the \",mdx(\"inlineCode\",{parentName:\"p\"},\"<cmath>\"),\" header file contains many useful functions, like \",mdx(\"inlineCode\",{parentName:\"p\"},\"ceil\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"floor\"),\", and \",mdx(\"inlineCode\",{parentName:\"p\"},\"round\"),\". Because these functions are already defined, you don't need to rewrite the code needed to do this. Instead of implementing logic to round a number, it was already defined - you won't need to do it yourself.\"),mdx(\"p\",null,\"In this lesson, you will learn how to write your own functions. \"),mdx(\"h1\",a({},{id:\"what-are-functions\"}),\"What Are Functions?\"),mdx(\"p\",null,\"Functions are just blocks of code that are predefined, and can be reused for your purposes. \"),mdx(\"p\",null,\"You've already used many functions in the past: \"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"ceil\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"floor\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"round\"))),mdx(\"p\",null,\"There are many more functions that you will learn about and use, which will be covered in the next lesson.\"),mdx(\"h2\",a({},{id:\"declaring-functions\"}),\"Declaring Functions\"),mdx(\"p\",null,\"The syntax of a function looks like this:\"),mdx(\"pre\",a({},{className:\"language-cpp\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-cpp\"}),\"returnType \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"functionName\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"type parameter1\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" type parameter2\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \\u2026\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// code that you want \"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" value\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"p\",null,`The code you write is really just something that takes in input, and then returns some output back to you for you to see. Functions are similar to that.\nFunctions can take in (be passed) values called parameters, which it will then process and return a value. `),mdx(\"p\",null,\"You'll need to specify the type of the return value, as well as the name of the function, so that it can be called later. \"),mdx(\"p\",null,\"Additionally, functions should be declared outside of your \",mdx(\"inlineCode\",{parentName:\"p\"},\"main()\"),` function.\nFunctions can be called in a more simple manner, that you're probably familiar with already:`),mdx(\"p\",null,\"Consider our own implementation of the \",mdx(\"inlineCode\",{parentName:\"p\"},\"round()\"),\" function:\"),mdx(\"pre\",a({},{className:\"language-cpp\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-cpp\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"round\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"float\"),\" n\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"n \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0.0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"n \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0.5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"else\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"n \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"-\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0.5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"round()\"),\" returns the nearest integer to \",mdx(\"inlineCode\",{parentName:\"p\"},\"n\"),`.\nWe can call `,mdx(\"inlineCode\",{parentName:\"p\"},\"round()\"),\" like this:\"),mdx(\"pre\",a({},{className:\"language-cpp\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-cpp\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token macro property\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive-hash\"}),\"#\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive keyword\"}),\"include\"),\" \",mdx(\"span\",a({parentName:\"span\"},{className:\"token string\"}),\"<iostream>\")),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"using\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"namespace\"),\" std\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"round\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"float\"),\" n\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"n \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0.0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"n \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0.5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"else\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"n \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"-\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0.5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"main\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"round\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5.6\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" endl\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"6\"),`\n`)),mdx(\"h1\",a({},{id:\"parameters-and-arguments\"}),\"Parameters and Arguments\"),mdx(\"p\",null,\"When talking about functions, you will hear the words parameter and argument used almost interchangeably - but they're not the same thing. \"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"Parameters are like placeholders for the values that you will pass to the function, while arguments are the values actually passed to the function\"),mdx(\"pre\",a({parentName:\"blockquote\"},{className:\"language-cpp\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-cpp\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"void\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"example\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" param1\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" param2\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// Parameters\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" param1 \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),\" param2\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"main\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"example\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"6\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// Arguments\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"h2\",a({},{id:\"passing-by-value\"}),\"Passing by Value\"),mdx(\"p\",null,\"Sometimes, we when pass values to a function, nothing outside the function is changed. When a variable is passed to a function, it isn't actually getting passed - C++ makes a copy of that function and then uses that in the code. \"),mdx(\"p\",null,\"This is called \",mdx(\"em\",{parentName:\"p\"},\"passing by value\"),\".\"),mdx(\"pre\",a({},{className:\"language-cpp\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-cpp\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token macro property\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive-hash\"}),\"#\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive keyword\"}),\"include\"),\" \",mdx(\"span\",a({parentName:\"span\"},{className:\"token string\"}),\"<iostream>\")),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"using\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"namespace\"),\" std\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"void\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"increment\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" num\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    num `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"10\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"main\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" num \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"10\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"increment\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"num\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" num \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" endl\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"10\"),`\n`)),mdx(\"p\",null,\"When we called \",mdx(\"inlineCode\",{parentName:\"p\"},\"increment\"),\" with \",mdx(\"inlineCode\",{parentName:\"p\"},\"num\"),\" as an argument, a copy of \",mdx(\"inlineCode\",{parentName:\"p\"},\"num\"),\" was passed to \",mdx(\"inlineCode\",{parentName:\"p\"},\"increment\"),\". Therefore, \",mdx(\"inlineCode\",{parentName:\"p\"},\"increment\"),\" added 10 to a copy of \",mdx(\"inlineCode\",{parentName:\"p\"},\"num\"),\", not the variable we're using. When we print \",mdx(\"inlineCode\",{parentName:\"p\"},\"num\"),\" after using \",mdx(\"inlineCode\",{parentName:\"p\"},\"increment\"),\", the value of \",mdx(\"inlineCode\",{parentName:\"p\"},\"num\"),\" is still the same.\"),mdx(\"p\",null,\"But what if we want the function to get the variable itself?\"),mdx(\"h2\",a({},{id:\"passing-by-reference\"}),\"Passing by Reference\"),mdx(\"p\",null,\"Every variable stores a variable, but it also has an address. The memory address of a variable is just where it's located in the memory, so C++ can find it. We can get the address of a variable with the \",mdx(\"inlineCode\",{parentName:\"p\"},\"&\"),\" operator in front of the variable:\"),mdx(\"pre\",a({},{className:\"language-cpp\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-cpp\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token macro property\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive-hash\"}),\"#\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive keyword\"}),\"include\"),\" \",mdx(\"span\",a({parentName:\"span\"},{className:\"token string\"}),\"<iostream>\")),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"using\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"namespace\"),\" std\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"main\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" num \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"10\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" num \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" endl\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"&\"),\"num \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" endl\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"10\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0x7ffe6ddc381c\"),`\n`)),mdx(\"p\",null,\"When you try to print the address of a variable on your own computer, it will be different. This is because your computer stores that variable in a different location, so \",mdx(\"inlineCode\",{parentName:\"p\"},\"&num\"),\" isn't always the same. However, it always stores the same value, \",mdx(\"inlineCode\",{parentName:\"p\"},\"10\"),\". \"),mdx(\"p\",null,\"Instead of passing a copy of a variable to a function, you can pass its reference. This will give the function the actual variable, meaning it can be changed:\"),mdx(\"pre\",a({},{className:\"language-cpp\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-cpp\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token macro property\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive-hash\"}),\"#\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive keyword\"}),\"include\"),\" \",mdx(\"span\",a({parentName:\"span\"},{className:\"token string\"}),\"<iostream>\")),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"using\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"namespace\"),\" std\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"void\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"increment\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"&\"),\"num\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    num `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"10\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"main\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" num \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"10\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"increment\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"num\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" num \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" endl\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"20\"),`\n`)),mdx(\"h2\",a({},{id:\"passing-arrays-to-functions\"}),\"Passing Arrays to Functions\"),mdx(\"p\",null,`C++ allows you to both pass arrays and return arrays through functions.\nLet's discuss the first two ways to pass arrays to functions in C++:`),mdx(\"h3\",a({},{id:\"passing-with-a-sized-array\"}),\"Passing with a Sized Array\"),mdx(\"p\",null,\"You can also pass using a sized array with this format:\"),mdx(\"pre\",a({},{className:\"language-cpp\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-cpp\"}),\"returnType \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"functionName\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"type arrayName\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"arraySize\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// code that you want\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" value\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`)),mdx(\"p\",null,\"The former example can be implemented in a similar way:\"),mdx(\"pre\",a({},{className:\"language-cpp\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-cpp\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token macro property\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive-hash\"}),\"#\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive keyword\"}),\"include\"),\" \",mdx(\"span\",a({parentName:\"span\"},{className:\"token string\"}),\"<iostream>\")),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"using\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"namespace\"),\" std\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"void\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"++\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token char\"}),\"' '\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n  cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" endl\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"main\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),`\n`)),mdx(\"h3\",a({},{id:\"passing-with-an-unsized-array\"}),\"Passing with an Unsized Array\"),mdx(\"p\",null,\"You can also pass an array without defining a size, but you'll also need to specify the size the array in another parameter, like so:\"),mdx(\"pre\",a({},{className:\"language-cpp\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-cpp\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token macro property\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive-hash\"}),\"#\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive keyword\"}),\"include\"),\" \",mdx(\"span\",a({parentName:\"span\"},{className:\"token string\"}),\"<iostream>\")),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"using\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"namespace\"),\" std\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"void\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" size\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),\" size\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"++\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token char\"}),\"' '\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n  cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" endl\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"main\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"h1\",a({},{id:\"function-overloading\"}),\"Function Overloading\"),mdx(\"p\",null,`Sometimes, you'll define functions with similar purposes, but have slight differences based on the type of data passed to it.\nConsider two functions that add different types of numbers:`),mdx(\"pre\",a({},{className:\"language-cpp\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-cpp\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token macro property\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive-hash\"}),\"#\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive keyword\"}),\"include\"),\" \",mdx(\"span\",a({parentName:\"span\"},{className:\"token string\"}),\"<iostream>\")),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"using\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"namespace\"),\" std\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"addInt\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" x\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" y\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" x \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),\" y\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"addDouble\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"double\"),\" x\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"double\"),\" y\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" x \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),\" y\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"main\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" x \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" y \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"double\"),\" w \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2.5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"double\"),\" z \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3.4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"addInt\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"x\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" y\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" endl\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"addDouble\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"w\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" z\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" endl\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"p\",null,\"Instead of implementing separate functions for each of the functions, we can just write one function with the same name, but different parameters. C++ will choose to use the version of function that matches the one with the correct parameters:\"),mdx(\"pre\",a({},{className:\"language-cpp\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-cpp\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token macro property\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive-hash\"}),\"#\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive keyword\"}),\"include\"),\" \",mdx(\"span\",a({parentName:\"span\"},{className:\"token string\"}),\"<iostream>\")),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"using\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"namespace\"),\" std\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"add\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" x\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" y\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" x \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),\" y\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"add\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"double\"),\" x\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"double\"),\" y\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" x \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),\" y\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"main\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" x \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" y \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"double\"),\" w \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2.5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"double\"),\" z \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3.4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"add\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"x\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" y\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" endl\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"add\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"w\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" z\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" endl\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"p\",null,\"Or, for example, you could implement a \",mdx(\"inlineCode\",{parentName:\"p\"},\"print\"),\" function for different types, like integers and arrays, by defining the same \",mdx(\"inlineCode\",{parentName:\"p\"},\"print\"),\" function with the same name, but different parameters. \"),mdx(\"pre\",a({},{className:\"language-cpp\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-cpp\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token macro property\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive-hash\"}),\"#\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive keyword\"}),\"include\"),\" \",mdx(\"span\",a({parentName:\"span\"},{className:\"token string\"}),\"<iostream>\")),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"using\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"namespace\"),\" std\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"void\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"string s\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" s \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" endl\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"void\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" size\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),\" size\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"++\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token char\"}),\"' '\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n  cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" endl\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"main\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    string str `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Hello World!\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),` \n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" nums\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"str\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"nums\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" Hello World\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"!\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),`\n`)),mdx(\"p\",null,\"C++ knows to use the second version of \",mdx(\"inlineCode\",{parentName:\"p\"},\"print\"),\" because we gave it two parameters, one for an array and one integer. Meanwhile, it also knows to use the first \",mdx(\"inlineCode\",{parentName:\"p\"},\"print\"),\" because it received a \",mdx(\"inlineCode\",{parentName:\"p\"},\"string\"),\". \"),mdx(\"h1\",a({},{id:\"prototypes-and-default-arguments\"}),\"Prototypes and Default Arguments\"),mdx(\"h2\",a({},{id:\"function-prototypes\"}),\"Function Prototypes\"),mdx(\"p\",null,\"You can write a function signature before actually defining the function, to tell the compiler (as well as anybody reading the code) the return type of the function, and its parameters. \"),mdx(\"p\",null,\"The function can then be defined later in the code. Notice that without prototypes, defining a function after it is called causes an error, like this:\"),mdx(\"pre\",a({},{className:\"language-cpp\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-cpp\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token macro property\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive-hash\"}),\"#\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive keyword\"}),\"include\"),\" \",mdx(\"span\",a({parentName:\"span\"},{className:\"token string\"}),\"<iostream>\")),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"using\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"namespace\"),\" std\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"main\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" nums\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"nums\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"void\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" size\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),\" size\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"++\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token char\"}),\"' '\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n  cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" endl\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" main\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"cpp\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"6\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" error\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" use of undeclared identifier \",mdx(\"span\",a({parentName:\"code\"},{className:\"token char\"}),\"'print'\"),`\n`)),mdx(\"p\",null,\"However, you can define a function prototype at the top:\"),mdx(\"pre\",a({},{className:\"language-cpp\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-cpp\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token macro property\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive-hash\"}),\"#\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive keyword\"}),\"include\"),\" \",mdx(\"span\",a({parentName:\"span\"},{className:\"token string\"}),\"<iostream>\")),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"using\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"namespace\"),\" std\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"void\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" size\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// Function Prototype\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"main\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" nums\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"nums\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"void\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" size\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),\" size\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"++\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token char\"}),\"' '\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n  cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" endl\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"p\",null,\"For somebody reading a program with many functions, it is useful to know all the functions inside the code before, and then to know the \",mdx(\"inlineCode\",{parentName:\"p\"},\"main\"),\" function, rather than looking through every function definition before seeing what the program actually does.\"),mdx(\"h2\",a({},{id:\"default-arguments\"}),\"Default Arguments\"),mdx(\"p\",null,\"You can specify default arguments, which are used when the value is unspecified when the function is called. Consider our previous print function, with an extra addition:\"),mdx(\"pre\",a({},{className:\"language-cpp\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-cpp\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token macro property\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive-hash\"}),\"#\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive keyword\"}),\"include\"),\" \",mdx(\"span\",a({parentName:\"span\"},{className:\"token string\"}),\"<iostream>\")),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"using\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"namespace\"),\" std\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"void\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" size\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" string delimiter\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),\" size\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"++\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" delimiter\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n  cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" endl\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"main\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" nums\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"nums\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\", \"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),`\n`)),mdx(\"p\",null,\"We can now specify what is used in between the values of the array when it is printed. However, we can make this parameter optional if you just want to use spaces:\"),mdx(\"pre\",a({},{className:\"language-cpp\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-cpp\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token macro property\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive-hash\"}),\"#\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token directive keyword\"}),\"include\"),\" \",mdx(\"span\",a({parentName:\"span\"},{className:\"token string\"}),\"<iostream>\")),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"using\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"namespace\"),\" std\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"void\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" size\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" string delimiter\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\" \"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),\" size\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"++\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" delimiter\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n  cout `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<<\"),\" endl\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"main\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" nums\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"nums\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),`\n`)),mdx(\"p\",null,\"A parameter can be given a default value by including it in its definition, as shown above. When it's not included, it goes to its default value. However, the default value an still be changed. \"),mdx(\"h1\",a({},{id:\"recursive-functions\"}),\"Recursive Functions\"),mdx(\"p\",null,`Recursive functions are functions that call themselves. When a recursive function runs, it will run until it reaches a \"base case\" or halting condition in which its job is fulfilled. Base cases are definite and do not call other functions.\nIf any halting condition is not defined, the function will run itself in an infinite loop.\nYou can think of a recursive function like a chain of dominoes: `),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"As each domino falls, it triggers the next one to fall\"),mdx(\"li\",{parentName:\"ul\"},'The last domino that falls acts as our \"base case\", because there is no more dominos for it to push down '),mdx(\"li\",{parentName:\"ul\"},\"Every a domino falls in our recursive function, our value is updated\")),mdx(\"p\",null,\"You might have heard of a \",mdx(\"em\",{parentName:\"p\"},\"fibonacci sequence\"),` before. The fibonacci sequence starts with 0 and 1. Each next term is made up of the sum of the previous two:\nThe first couple terms of this sequence look like this:`),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{}),`0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55\n`)),mdx(\"p\",null,\"We can implement this with recursion, by making the function call the values of previous fibonacci numbers, since the nth fibonacci number is equal to the (n-1)th number and the (n-2)th number.\"),mdx(\"pre\",a({},{className:\"language-cpp\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-cpp\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"fib\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"int\"),\" n\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),` \n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"n \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"==\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"||\"),\" n \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"==\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),` \n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"else\"),` \n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"fib\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"n\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"-\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"fib\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"n\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"-\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),` \n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),` \n`)))}MDXContent.isMDXComponent=!0;\n","scope":{}},"headings":[{"level":1,"text":"What Are Functions?","slug":"what-are-functions","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;var s=(t,o,n)=>o in t?D(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,u=(t,o)=>{for(var n in o||(o={}))r.call(o,n)&&s(t,n,o[n]);if(p)for(var n of p(o))a.call(o,n)&&s(t,n,o[n]);return t},c=(t,o)=>M(t,X(o));var y=(t,o)=>{var n={};for(var e in t)r.call(t,e)&&o.indexOf(e)<0&&(n[e]=t[e]);if(t!=null&&p)for(var e of p(t))o.indexOf(e)<0&&a.call(t,e)&&(n[e]=t[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:t}=e,o=y(e,[\"components\"]);return mdx(MDXLayout,c(u(u({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"What Are Functions?\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Declaring Functions","slug":"declaring-functions","md":{"compiledSource":"var y=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;var c=(n,o,t)=>o in n?y(n,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[o]=t,u=(n,o)=>{for(var t in o||(o={}))r.call(o,t)&&c(n,t,o[t]);if(p)for(var t of p(o))a.call(o,t)&&c(n,t,o[t]);return n},s=(n,o)=>M(n,X(o));var D=(n,o)=>{var t={};for(var e in n)r.call(n,e)&&o.indexOf(e)<0&&(t[e]=n[e]);if(n!=null&&p)for(var e of p(n))o.indexOf(e)<0&&a.call(n,e)&&(t[e]=n[e]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var e=t,{components:n}=e,o=D(e,[\"components\"]);return mdx(MDXLayout,s(u(u({},layoutProps),o),{components:n,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Declaring Functions\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Parameters and Arguments","slug":"parameters-and-arguments","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable;var s=(t,n,o)=>n in t?D(t,n,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[n]=o,a=(t,n)=>{for(var o in n||(n={}))p.call(n,o)&&s(t,o,n[o]);if(r)for(var o of r(n))u.call(n,o)&&s(t,o,n[o]);return t},m=(t,n)=>M(t,X(n));var y=(t,n)=>{var o={};for(var e in t)p.call(t,e)&&n.indexOf(e)<0&&(o[e]=t[e]);if(t!=null&&r)for(var e of r(t))n.indexOf(e)<0&&u.call(t,e)&&(o[e]=t[e]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var e=o,{components:t}=e,n=y(e,[\"components\"]);return mdx(MDXLayout,m(a(a({},layoutProps),n),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Parameters and Arguments\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Passing by Value","slug":"passing-by-value","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var r=(o,t,n)=>t in o?M(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,u=(o,t)=>{for(var n in t||(t={}))a.call(t,n)&&r(o,n,t[n]);if(p)for(var n of p(t))s.call(t,n)&&r(o,n,t[n]);return o},y=(o,t)=>X(o,c(t));var D=(o,t)=>{var n={};for(var e in o)a.call(o,e)&&t.indexOf(e)<0&&(n[e]=o[e]);if(o!=null&&p)for(var e of p(o))t.indexOf(e)<0&&s.call(o,e)&&(n[e]=o[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:o}=e,t=D(e,[\"components\"]);return mdx(MDXLayout,y(u(u({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Passing by Value\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Passing by Reference","slug":"passing-by-reference","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var s=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable;var a=(n,o,t)=>o in n?D(n,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[o]=t,r=(n,o)=>{for(var t in o||(o={}))s.call(o,t)&&a(n,t,o[t]);if(p)for(var t of p(o))u.call(o,t)&&a(n,t,o[t]);return n},y=(n,o)=>M(n,X(o));var c=(n,o)=>{var t={};for(var e in n)s.call(n,e)&&o.indexOf(e)<0&&(t[e]=n[e]);if(n!=null&&p)for(var e of p(n))o.indexOf(e)<0&&u.call(n,e)&&(t[e]=n[e]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var e=t,{components:n}=e,o=c(e,[\"components\"]);return mdx(MDXLayout,y(r(r({},layoutProps),o),{components:n,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Passing by Reference\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Passing Arrays to Functions","slug":"passing-arrays-to-functions","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var u=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;var e=(o,t,n)=>t in o?D(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,r=(o,t)=>{for(var n in t||(t={}))u.call(t,n)&&e(o,n,t[n]);if(p)for(var n of p(t))a.call(t,n)&&e(o,n,t[n]);return o},y=(o,t)=>M(o,X(t));var c=(o,t)=>{var n={};for(var s in o)u.call(o,s)&&t.indexOf(s)<0&&(n[s]=o[s]);if(o!=null&&p)for(var s of p(o))t.indexOf(s)<0&&a.call(o,s)&&(n[s]=o[s]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var s=n,{components:o}=s,t=c(s,[\"components\"]);return mdx(MDXLayout,y(r(r({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Passing Arrays to Functions\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":3,"text":"Passing with a Sized Array","slug":"passing-with-a-sized-array","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var e=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var u=(t,o,n)=>o in t?D(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,p=(t,o)=>{for(var n in o||(o={}))r.call(o,n)&&u(t,n,o[n]);if(e)for(var n of e(o))s.call(o,n)&&u(t,n,o[n]);return t},y=(t,o)=>M(t,X(o));var i=(t,o)=>{var n={};for(var a in t)r.call(t,a)&&o.indexOf(a)<0&&(n[a]=t[a]);if(t!=null&&e)for(var a of e(t))o.indexOf(a)<0&&s.call(t,a)&&(n[a]=t[a]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var a=n,{components:t}=a,o=i(a,[\"components\"]);return mdx(MDXLayout,y(p(p({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Passing with a Sized Array\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":3,"text":"Passing with an Unsized Array","slug":"passing-with-an-unsized-array","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var e=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var u=(n,t,o)=>t in n?D(n,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):n[t]=o,p=(n,t)=>{for(var o in t||(t={}))r.call(t,o)&&u(n,o,t[o]);if(e)for(var o of e(t))s.call(t,o)&&u(n,o,t[o]);return n},y=(n,t)=>M(n,X(t));var i=(n,t)=>{var o={};for(var a in n)r.call(n,a)&&t.indexOf(a)<0&&(o[a]=n[a]);if(n!=null&&e)for(var a of e(n))t.indexOf(a)<0&&s.call(n,a)&&(o[a]=n[a]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var a=o,{components:n}=a,t=i(a,[\"components\"]);return mdx(MDXLayout,y(p(p({},layoutProps),t),{components:n,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Passing with an Unsized Array\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Function Overloading","slug":"function-overloading","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;var c=(o,n,t)=>n in o?D(o,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[n]=t,u=(o,n)=>{for(var t in n||(n={}))r.call(n,t)&&c(o,t,n[t]);if(p)for(var t of p(n))a.call(n,t)&&c(o,t,n[t]);return o},s=(o,n)=>M(o,X(n));var y=(o,n)=>{var t={};for(var e in o)r.call(o,e)&&n.indexOf(e)<0&&(t[e]=o[e]);if(o!=null&&p)for(var e of p(o))n.indexOf(e)<0&&a.call(o,e)&&(t[e]=o[e]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var e=t,{components:o}=e,n=y(e,[\"components\"]);return mdx(MDXLayout,s(u(u({},layoutProps),n),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Function Overloading\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Prototypes and Default Arguments","slug":"prototypes-and-default-arguments","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;var s=(t,o,n)=>o in t?M(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,u=(t,o)=>{for(var n in o||(o={}))r.call(o,n)&&s(t,n,o[n]);if(p)for(var n of p(o))a.call(o,n)&&s(t,n,o[n]);return t},y=(t,o)=>X(t,c(o));var D=(t,o)=>{var n={};for(var e in t)r.call(t,e)&&o.indexOf(e)<0&&(n[e]=t[e]);if(t!=null&&p)for(var e of p(t))o.indexOf(e)<0&&a.call(t,e)&&(n[e]=t[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:t}=e,o=D(e,[\"components\"]);return mdx(MDXLayout,y(u(u({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Prototypes and Default Arguments\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Function Prototypes","slug":"function-prototypes","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var e=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var y=(o,t,n)=>t in o?D(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,u=(o,t)=>{for(var n in t||(t={}))r.call(t,n)&&y(o,n,t[n]);if(e)for(var n of e(t))s.call(t,n)&&y(o,n,t[n]);return o},a=(o,t)=>M(o,X(t));var c=(o,t)=>{var n={};for(var p in o)r.call(o,p)&&t.indexOf(p)<0&&(n[p]=o[p]);if(o!=null&&e)for(var p of e(o))t.indexOf(p)<0&&s.call(o,p)&&(n[p]=o[p]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var p=n,{components:o}=p,t=c(p,[\"components\"]);return mdx(MDXLayout,a(u(u({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Function Prototypes\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Default Arguments","slug":"default-arguments","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var u=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;var s=(t,o,n)=>o in t?M(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,p=(t,o)=>{for(var n in o||(o={}))r.call(o,n)&&s(t,n,o[n]);if(u)for(var n of u(o))a.call(o,n)&&s(t,n,o[n]);return t},D=(t,o)=>X(t,c(o));var y=(t,o)=>{var n={};for(var e in t)r.call(t,e)&&o.indexOf(e)<0&&(n[e]=t[e]);if(t!=null&&u)for(var e of u(t))o.indexOf(e)<0&&a.call(t,e)&&(n[e]=t[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:t}=e,o=y(e,[\"components\"]);return mdx(MDXLayout,D(p(p({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Default Arguments\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Recursive Functions","slug":"recursive-functions","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var u=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var c=(o,t,n)=>t in o?D(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,p=(o,t)=>{for(var n in t||(t={}))r.call(t,n)&&c(o,n,t[n]);if(u)for(var n of u(t))s.call(t,n)&&c(o,n,t[n]);return o},a=(o,t)=>M(o,X(t));var y=(o,t)=>{var n={};for(var e in o)r.call(o,e)&&t.indexOf(e)<0&&(n[e]=o[e]);if(o!=null&&u)for(var e of u(o))t.indexOf(e)<0&&s.call(o,e)&&(n[e]=o[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:o}=e,t=y(e,[\"components\"]);return mdx(MDXLayout,a(p(p({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Recursive Functions\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}}]},"__N_SSG":true}