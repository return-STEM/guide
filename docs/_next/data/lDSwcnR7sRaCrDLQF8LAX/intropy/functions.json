{"pageProps":{"courseData":{"href":"intropy","difficulty":"Beginner","name":"Introduction to Python"},"walkthroughData":{"lessons":[{"name":"Introduction","href":"introduction"},{"name":"Variables and Data Types","href":"variables"},{"name":"Console I/O","href":"consoleio"},{"name":"Arithmetic Operations","href":"arithmetic"},{"name":"Control Structures: Conditionals","href":"conditionals"},{"name":"Control Structures: Loops","href":"loops"},{"name":"Lists","href":"lists"},{"name":"Functions","href":"functions"}],"wipLessons":[{"name":"C++ Standard Library (STL)","href":"cppstandardlibrary"},{"name":"Debugging","href":"debugging"}]},"lessonData":{"name":"Functions","href":"functions"},"mdContent":{"compiledSource":"var l=Object.defineProperty,i=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;var r=(e,n,s)=>n in e?l(e,n,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[n]=s,a=(e,n)=>{for(var s in n||(n={}))o.call(n,s)&&r(e,s,n[s]);if(p)for(var s of p(n))c.call(n,s)&&r(e,s,n[s]);return e},m=(e,n)=>i(e,u(n));var N=(e,n)=>{var s={};for(var t in e)o.call(e,t)&&n.indexOf(t)<0&&(s[t]=e[t]);if(e!=null&&p)for(var t of p(e))n.indexOf(t)<0&&c.call(e,t)&&(s[t]=e[t]);return s};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(s){var t=s,{components:e}=t,n=N(t,[\"components\"]);return mdx(MDXLayout,m(a(a({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"You've already used functions in the past. One of their biggest advantages is reusability - you can use functions to sort lists (\",mdx(\"inlineCode\",{parentName:\"p\"},\"sort\"),\"), round numbers (\",mdx(\"inlineCode\",{parentName:\"p\"},\"round\"),\"), and more. You can use it as many times as you want, and you'll never need to write your own sort function again. Furthermore, functions are useful because you don't need to know the exact algorithm something is designed in, you just need to know how to use the function. You don't need to know how to sort to use \",mdx(\"inlineCode\",{parentName:\"p\"},\"sort\"),\", only how to use the \",mdx(\"inlineCode\",{parentName:\"p\"},\"sort\"),\" function. \"),mdx(\"p\",null,\"In this lesson, you will learn how to write your own functions.\"),mdx(\"h1\",a({},{id:\"style\"}),\"Style\"),mdx(\"p\",null,\"The \",mdx(\"strong\",{parentName:\"p\"},\"style\"),\" of a program is how it looks. This affects the code's readability. Code should be easy to read and look good so it's easier to expand and improve in the future.\"),mdx(\"p\",null,\"Look at the programs below: which one looks easier to read?\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# Example 1\"),`\nMyVeryLongVariableName `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"while\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"True\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"not\"),\" MyVeryLongVariableName \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"break\"),`\n    MyVeryLongVariableName `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"\\u201Chello\\u201D\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),` \n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"\\u201Cworld\\u201D\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`)),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# Example 2\"),`\ni `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"while\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    i `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"\\u201Chello\\u201D\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"\\u201Cworld\\u201D\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`)),mdx(\"p\",null,\"Despite producing the same output, the code in \",mdx(\"inlineCode\",{parentName:\"p\"},\"Example 1\"),\"looks less complicated and therefore easier to read\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"Output\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),` hello\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),` hello\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),` hello\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),` hello\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),` hello\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),` world\n`)),mdx(\"p\",null,\"Most programming languages come with \",mdx(\"strong\",{parentName:\"p\"},\"style guides\"),\" that tell you how to format your code.\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"The style guide for Python is called \",mdx(\"strong\",{parentName:\"p\"},\"PEP-8\"),\", and you can access it \",mdx(\"a\",a({parentName:\"p\"},{href:\"https://peps.python.org/pep-0008/\"}),\"here\")),mdx(\"p\",{parentName:\"blockquote\"},\"PEP-8 goes into very fine details about Python--don't worry if you can't understand all of it yet!\")),mdx(\"p\",null,\"Readable code is important for other people to know what your code does\"),mdx(\"h1\",a({},{id:\"what-are-functions\"}),\"What are functions?\"),mdx(\"p\",null,\"All programs are basically just sets of instructions that process some inputs, and then return outputs back to you. Functions are like mini-programs: they receive input, do operations on them, and then output something. You have already used many functions, such as  \",mdx(\"inlineCode\",{parentName:\"p\"},\"print\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"input\"),\", and \",mdx(\"inlineCode\",{parentName:\"p\"},\"len\"),\". These functions we have been using are actually very complex pieces of code.\"),mdx(\"p\",null,\"You can define a function like this: \"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"function_name\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"parameter1\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" parameter2\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" parameter3\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n`)),mdx(\"p\",null,\"If the function takes no parameters, there will be nothing in the parenthesis. It's necessary that you specify the name of the function, since you'll need it to call the function later to use. \"),mdx(\"details\",null,mdx(\"summary\",null,\"Practice: Which function is declared correctly? 1. `def add two numbers():` 2. `def add_two_numbers():` 3. `def add_two_numbers:` 4. `def add_two_numbers()`\"),\"Answer: 2 is declared correctly. (1) has spaces between each word of the name, which is not allowed. (3) has no parenthesis. You must include parenthesis for the function, even if there are no parameters. (4) has no colon.\"),mdx(\"p\",null,\"Let's write a simple function that adds two numbers:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"add_two_nums\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"a\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" b\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"sum\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" a \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),` b\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"sum\"),`\n`)),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"def\"),\" keyword defines the functions. \",mdx(\"inlineCode\",{parentName:\"p\"},\"add_two_nums\"),\" has two parameters, a and b. When the function is run, a and b will be specified based on order, so the function knows which one is which. The \",mdx(\"inlineCode\",{parentName:\"p\"},\"return\"),\" keyword specifies what the function should give back to us (return to us). \"),mdx(\"p\",null,\"For example,\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{}),`print(add_two_nums(4, 5))\n`)),mdx(\"p\",null,`Displays 9 on the screen, since 4 + 5 = 9.\nHowever, you won't always need to define a variable like `,mdx(\"inlineCode\",{parentName:\"p\"},\"sum\"),\" to return. Instead, you can also put expressions in your \",mdx(\"inlineCode\",{parentName:\"p\"},\"return\"),\" statement:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"add_two_nums\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"a\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" b\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" a \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),` b\n`)),mdx(\"p\",null,\"Which shortens the process. \"),mdx(\"h2\",a({},{id:\"naming-functions\"}),\"Naming Functions\"),mdx(\"p\",null,\"Just like variables, functions should be named according to their purpose. A function that finds the prime numbers in a list might be called \",mdx(\"inlineCode\",{parentName:\"p\"},\"find_primes\"),\". Remember to keep your function names reasonably short. They should make sense to use. Additionally, you should follow the same naming conventions as variables.\"),mdx(\"p\",null,\"Come up with names for the functions below:\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"A function, which, given a number, finds whether the number is prime or not\"),mdx(\"li\",{parentName:\"ol\"},\"A function, which, given a number, finds the factorial of that number\"),mdx(\"li\",{parentName:\"ol\"},\"A function that accepts someone's name as a parameter, and then greets that person.\"),mdx(\"li\",{parentName:\"ol\"},\"A function that sorts a given list\"),mdx(\"li\",{parentName:\"ol\"},\"A function that adds one to every value in a list\")),mdx(\"h1\",a({},{id:\"calling-functions\"}),\"Calling functions\"),mdx(\"p\",null,\"After declaring the function, you can write any code that will be run when the function is \",mdx(\"strong\",{parentName:\"p\"},\"called\"),\". All code inside a function should be indented--this signifies that the code is inside the function, just like with \",mdx(\"inlineCode\",{parentName:\"p\"},\"if\"),\" blocks.\"),mdx(\"p\",null,\"Now you can run the code inside the function by \",mdx(\"strong\",{parentName:\"p\"},\"calling it.\"),\" To call a function, put its name followed by a set of parenthesis. When you call a function, Python will jump to where the function is defined and execute the code that is part of the function\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"my_function\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"I am inside my_function\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\nmy_function`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),` I am inside my_function\n`)),mdx(\"p\",null,\"You can call a function multiple times. Your function can have any amount of any valid Python code. This means that your function can have:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Loops\"),mdx(\"li\",{parentName:\"ul\"},\"Conditionals\"),mdx(\"li\",{parentName:\"ul\"},\"Functions (including itself)\"),mdx(\"li\",{parentName:\"ul\"},\"Anything else\")),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"count_to_5_evens\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"range\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"%\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"==\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n            `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"First time\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\ncount_to_5_evens`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Second time\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\ncount_to_5_evens`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),` First time\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),` Second time\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),`\n`)),mdx(\"h1\",a({},{id:\"function-parameters\"}),\"Function parameters\"),mdx(\"p\",null,\"Functions can also have \",mdx(\"strong\",{parentName:\"p\"},\"parameters\"),\" (input for the function). When you give them values, they are called \",mdx(\"strong\",{parentName:\"p\"},\"arguments\"),\". Parameters give functions more specific instructions or tell it to calculate with certain values with parameters. Parameters are defined by including them inside of the parenthesis:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"count_to_n_by_m\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"n\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" m\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# We can use n and m as parameters inside our function\"),`\n`)),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"Parameters are like placeholders for the values that you will pass to the function, while arguments are the values actually passed to the function.\")),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"add_two_nums\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"a\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" b\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# Parameters\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" a \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),` b\n\nadd_two_nums`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# Arguments\"),`\n`)),mdx(\"p\",null,\"Python differentiates the arguments you give it by the order. The first value you give it will be \",mdx(\"inlineCode\",{parentName:\"p\"},\"n\"),\" and the second value you give it will be \",mdx(\"inlineCode\",{parentName:\"p\"},\"m\"),\":\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"count_to_n_by_m\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"n\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" m\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"range\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" n \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" m\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# Count to 2 by 4\"),`\ncount_to_n_by_m`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# Count to 4 by 2\"),`\ncount_to_n_by_m`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),`\n`)),mdx(\"p\",null,\"Giving too little or too many parameters returns an error:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"count_to_n_by_m\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"n\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" m\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"range\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" n \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" m\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\ncount_to_n_by_m`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# Error, what to do with 5?\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" TypeError\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" count_to_n_by_m\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" takes \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),\" positional arguments but \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),` were given\n\ncount_to_n_by_m`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# Error, what would m be then?\"),`\n `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" TypeError\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" count_to_n_by_m\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" missing \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),\" required positional argument\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'m'\"),`\n`)),mdx(\"h2\",a({},{id:\"optional-parameters\"}),\"Optional Parameters\"),mdx(\"p\",null,\"Functions can have optional parameters, which you can specify when declaring the function. Optional parameters don't need to have an order, so an example like this is acceptable:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"greet_me\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"name\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" times \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" greeting \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Good Morning\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"range\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" times\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string-interpolation\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token string\"}),'f\"'),mdx(\"span\",a({parentName:\"span\"},{className:\"token interpolation\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"{\"),\"greeting\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"}\")),mdx(\"span\",a({parentName:\"span\"},{className:\"token string\"}),\", \"),mdx(\"span\",a({parentName:\"span\"},{className:\"token interpolation\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"{\"),\"name\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"}\")),mdx(\"span\",a({parentName:\"span\"},{className:\"token string\"}),'!\"')),`\ngreet_me`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Sam\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" greeting \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Hello\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# times still defaults to 1\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" Hello\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),` Sam!\n`)),mdx(\"p\",null,\"Always put arguments which are positional in front of those which are non-positional (optional) arguments:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"greet_me\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Sam\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" greeting \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Hello\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" times \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# This will work\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" Hello\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),` Sam!\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" Hello\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),` Sam!\n\ngreet_me`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"greeting \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Hello\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Sam\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" times \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# This will not\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" SyntaxError\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),` positional argument follows keyword argument\n`)),mdx(\"h1\",a({},{id:\"return-values\"}),\"Return values\"),mdx(\"p\",null,\"A function can also give back (return) a value. The \",mdx(\"inlineCode\",{parentName:\"p\"},\"input\"),\" function is an example of a function that returns a string. We can then assign that returned value to a variable or give it to another function as an argument.\"),mdx(\"p\",null,\"We can make a function return a value using the \",mdx(\"inlineCode\",{parentName:\"p\"},\"return\"),\" keyword at the bottom of our function:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"add_two\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"num\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" num \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# returns a number 2 above num\"),`\nx `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" add_two\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"x\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"7\"),`\n`)),mdx(\"h2\",a({},{id:\"pass-by-value\"}),\"Pass by Value\"),mdx(\"p\",null,\"Integers, floats, booleans, and strings are \",mdx(\"strong\",{parentName:\"p\"},\"primitive data types\"),\" in Python. When one of these are passed to a function, the function gets a \",mdx(\"strong\",{parentName:\"p\"},\"copy\"),\" of what is passed in. This means if we change the copy, those changes \",mdx(\"strong\",{parentName:\"p\"},\"will not affect\"),\" the original variable we gave it:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# doesn't work since the function only got a copy\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"double\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"num\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\nnum `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"*=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),`\nnum `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"10\"),`\ndouble`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"num\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"num\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"10\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# does not alter the original variable\"),`\n`)),mdx(\"p\",null,\"If we wanted to change that variable, we could reassign it:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# return the value, then reassign\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"double\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"num\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" num \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"*\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),`\nnum `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"10\"),`\nnum `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" double\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"num\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"num\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"20\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# Alters the original variable\"),`\n\n`)),mdx(\"h2\",a({},{id:\"pass-by-reference\"}),\"Pass by Reference\"),mdx(\"p\",null,\"Non-primitive data types (everything else, like lists) are \",mdx(\"strong\",{parentName:\"p\"},\"passed by reference\"),\". This means that the function receives a reference to the data we pass in. If we change (mutate) the argument, those changes \",mdx(\"strong\",{parentName:\"p\"},\"will affect\"),\" the original variable.\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# Pass by Reference - Mutating\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"mutate\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"value\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    value`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"new data\"'),`\nmy_val `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"test\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"test\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"test\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\nmutate`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"my_val\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"my_val\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"new data\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"test\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"test\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),` \n`)),mdx(\"p\",null,\"However, if the argument is \",mdx(\"strong\",{parentName:\"p\"},\"reassigned\"),\" inside of the function, that reassignment is not carried over to the original variable we pass in.\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# Pass by Reference - Reassignment\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"reassign\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"value\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    value `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"new data\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"more data\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\nmy_val `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"test\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"test\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"test\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\nreassign`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"my_val\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"my_val\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"test\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"test\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"test\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"h2\",a({},{id:\"an-analogy\"}),\"An analogy\"),mdx(\"p\",null,\"Imagine that you're working on an essay with your friend. You already wrote some of it, and you want to give it to your friend for him to work on it.\"),mdx(\"p\",null,\"I can give him a copy of my essay (pass by value). However, I wouldn't see any of the changes he makes unless he gives his edited copy back to me.\"),mdx(\"p\",null,\"I can also tell him to read it and come to me (in room 104) whenever he wants to make a change (pass by reference). Any change he wants to make is immediately applied to the original copy of the essay. \"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"However, if he decides to go to some other classroom (room 105), my essay would not be changed because I would not know what to change (he told someone else, and not me)\")),mdx(\"p\",null,mdx(\"img\",a({parentName:\"p\"},{src:\"functions/functions-8.png\",alt:null}))),mdx(\"h1\",a({},{id:\"using-functions-in-your-code\"}),\"Using Functions in your Code\"),mdx(\"p\",null,\"Aside from very simple programs with few lines, it is almost always useful to use functions in your program. Functions should be made to do specific tasks that can be reusable, and should be named accordingly with appropriate names.\"),mdx(\"p\",null,\"Example: A function which triples a number should be called \",mdx(\"inlineCode\",{parentName:\"p\"},\"triple_number\"),\" and not \",mdx(\"inlineCode\",{parentName:\"p\"},\"my_func\")),mdx(\"p\",null,\"For example, let\\u2019s say that I define a function that can sort a list of integers:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"sort\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"range\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"len\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n        key `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n        j `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"-\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"while\"),\" j \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"and\"),\" key \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),\" arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"j\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n            arr`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"j\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"j\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n            j `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"-=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),`\n        arr`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"j\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),` key\n`)),mdx(\"p\",null,\"If we didn't use functions, sorting two lists would look like this. Notice how much code we have to repeat here:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"range\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"len\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"some_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n         key `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" some_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n         j `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"-\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),`\n         `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"while\"),\" j \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"and\"),\" key \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),\" some_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"j\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n               some_list`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"j\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" some_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"j\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n               j `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"-=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),`\n         some_list`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"j\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),` key\n\n `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"range\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"len\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"another_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n        key `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" another_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n        j `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"-\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"while\"),\" j \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"and\"),\" key \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),\" another_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"j\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n              another_list`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"j\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" another_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"j\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n              j `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"-=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),`\n        another_list`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"j\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),` key\n`)),mdx(\"p\",null,\"Conversely, we could use functions, which gets rid of a lot of repeated code and makes our code shorter overall:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"sort\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"range\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"len\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n        key `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"i\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n        j `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" i \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"-\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"while\"),\" j \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"and\"),\" key \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),\" arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"j\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n            arr`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"j\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" arr\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"j\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n            j `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"-=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),`\n        arr`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"j\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),` key\n sort`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"some_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n sort`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"another_list\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`)),mdx(\"h1\",a({},{id:\"recursion\"}),\"Recursion\"),mdx(\"p\",null,\"A \",mdx(\"strong\",{parentName:\"p\"},\"recursive function\"),\" is a function that \",mdx(\"strong\",{parentName:\"p\"},\"calls itself\"),`. When a recursive function runs, it will call itself multiple times until a \"base case\" is reached. The base case doesn't have a recursive call and gives a definite value.`),mdx(\"p\",null,\"Think of a recursive function like a flight of stairs: \"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"You will go down the flight of stairs until you reach the floor\"),mdx(\"li\",{parentName:\"ol\"},\"After that, you will go back up, collecting each result using information from the previous step\"),mdx(\"li\",{parentName:\"ol\"},\"Each time a recursive function calls itself, we go down a step\"),mdx(\"li\",{parentName:\"ol\"},\"After that, we use the result we find at the bottom to evaluate each function until we reach the top again\")),mdx(\"p\",null,mdx(\"img\",a({parentName:\"p\"},{src:\"functions/functions-8-recursion.png\",alt:null}))),mdx(\"h2\",a({},{id:\"example\"}),\"Example\"),mdx(\"p\",null,\"We can use recursion to solve the \",mdx(\"strong\",{parentName:\"p\"},\"factorial\"),\". A factorial is defined like this:\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"For a number n, the factorial n is multiplied by every whole number less than n.\")),mdx(\"p\",null,\"Factorials are represented by a !\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"5! = 5 \",mdx(\"em\",{parentName:\"p\"},\" 4 \"),\" 3 \",mdx(\"em\",{parentName:\"p\"},\" 2 \"),\" 1\"),mdx(\"p\",{parentName:\"blockquote\"},\"7! = 7 \",mdx(\"em\",{parentName:\"p\"},\" 6 \"),\" 5 \",mdx(\"em\",{parentName:\"p\"},\" 4 \"),\" 3 \",mdx(\"em\",{parentName:\"p\"},\" 2 \"),\" 1\")),mdx(\"p\",null,\"To find the factorial of 5 (5!), we need to\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"Evaluate \",mdx(\"inlineCode\",{parentName:\"li\"},\"5 * 4 * 3 * 2 * 1\")),mdx(\"li\",{parentName:\"ol\"},\"Evaluate \",mdx(\"inlineCode\",{parentName:\"li\"},\"4 * 3 * 2 * 1\")),mdx(\"li\",{parentName:\"ol\"},\"Evaluate \",mdx(\"inlineCode\",{parentName:\"li\"},\"3 * 2 * 1\")),mdx(\"li\",{parentName:\"ol\"},\"Evaluate \",mdx(\"inlineCode\",{parentName:\"li\"},\"2 * 1\"))),mdx(\"p\",null,\"This can be done with recursion:\"),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\"fac\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"*\"),\" fac\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# Evaluate fac(4)\"),`\nfac`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"*\"),\" fac\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# Evaluate fac(3)\"),`\nfac`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"*\"),\" fac\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# Evaluate fac(2)\"),`\nfac`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"*\"),\" fac\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# Evaluate fac(1)\"),`\nfac`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),\"          \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# Base case evaluates to 1\"),`\n`)),mdx(\"p\",null,mdx(\"img\",a({parentName:\"p\"},{src:\"functions/functions-8-recursion-fact.png\",alt:null}))),mdx(\"h1\",a({},{id:\"practical-application-date-converter\"}),\"Practical Application: Date Converter\"),mdx(\"p\",null,\"The following function returns the index that corresponds with the day of the week.\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"This example uses a dictionary, a data structure you haven't learned yet. It looks up the number based on the key (\",mdx(\"inlineCode\",{parentName:\"p\"},'\"Sun\"'),\", \",mdx(\"inlineCode\",{parentName:\"p\"},'\"Mon\"'),\", etc.), instead of a number (like lists do). \")),mdx(\"pre\",a({},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"day_to_index\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"day\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    translate `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Sun\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"0\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Mon\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Tue\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Wed\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Thu\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"4\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Fri\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"5\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Sat\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"6\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" translate\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"day\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n meet_links `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"link0\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" link1\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" link2\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" link3\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" link4\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" link5\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" link6\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n x `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"input\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"\\u201CWhat day of the week \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"is\"),\" it?\\u201D\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"meet_links\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"day_to_index\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"x\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n \n `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" What day of the week \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"is\"),` it? Fri\n `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),` link5\n`)),mdx(\"h1\",a({},{id:\"vocabulary\"}),\"Vocabulary\"),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",a({parentName:\"tr\"},{align:\"center\"}),\"Word\"),mdx(\"th\",a({parentName:\"tr\"},{align:\"center\"}),\"Definition\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"Function\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"Pieces of code that can be called from other parts of the code\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"Abstraction\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"Hiding away unnecessary details and the inner workings of the code\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"Parameters\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"Names listed in the function definition:\",mdx(\"br\",null),\"def function(p)\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"Arguments\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"The actual values that are passed into a function\",mdx(\"br\",null),\"def function(p) \\u2192 function(5)\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"Recursion\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"A programming technique that involves functions that call themselves\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"Pass by Value\"),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"When you make a copy in the memory of the value of the passed argument\")))),mdx(\"h1\",a({},{id:\"python-concepts\"}),\"Python Concepts\"),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",a({parentName:\"tr\"},{align:\"center\"}),\"Syntax\"),mdx(\"th\",a({parentName:\"tr\"},{align:\"center\"}),\"Definition\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),mdx(\"inlineCode\",{parentName:\"td\"},\"def\")),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"Used to define a function\",mdx(\"br\",null))),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),mdx(\"inlineCode\",{parentName:\"td\"},\"return\")),mdx(\"td\",a({parentName:\"tr\"},{align:\"center\"}),\"Allows values to be returned from a function\")))))}MDXContent.isMDXComponent=!0;\n","scope":{}},"headings":[{"level":1,"text":"Style","slug":"style","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,y=Object.prototype.propertyIsEnumerable;var a=(t,o,n)=>o in t?M(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,u=(t,o)=>{for(var n in o||(o={}))r.call(o,n)&&a(t,n,o[n]);if(p)for(var n of p(o))y.call(o,n)&&a(t,n,o[n]);return t},s=(t,o)=>X(t,c(o));var D=(t,o)=>{var n={};for(var e in t)r.call(t,e)&&o.indexOf(e)<0&&(n[e]=t[e]);if(t!=null&&p)for(var e of p(t))o.indexOf(e)<0&&y.call(t,e)&&(n[e]=t[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:t}=e,o=D(e,[\"components\"]);return mdx(MDXLayout,s(u(u({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Style\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"What are functions?","slug":"what-are-functions","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var s=(t,o,n)=>o in t?D(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,u=(t,o)=>{for(var n in o||(o={}))a.call(o,n)&&s(t,n,o[n]);if(p)for(var n of p(o))r.call(o,n)&&s(t,n,o[n]);return t},c=(t,o)=>M(t,X(o));var y=(t,o)=>{var n={};for(var e in t)a.call(t,e)&&o.indexOf(e)<0&&(n[e]=t[e]);if(t!=null&&p)for(var e of p(t))o.indexOf(e)<0&&r.call(t,e)&&(n[e]=t[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:t}=e,o=y(e,[\"components\"]);return mdx(MDXLayout,c(u(u({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"What are functions?\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Naming Functions","slug":"naming-functions","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var u=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var s=(n,o,t)=>o in n?D(n,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[o]=t,e=(n,o)=>{for(var t in o||(o={}))a.call(o,t)&&s(n,t,o[t]);if(u)for(var t of u(o))r.call(o,t)&&s(n,t,o[t]);return n},c=(n,o)=>M(n,X(o));var y=(n,o)=>{var t={};for(var p in n)a.call(n,p)&&o.indexOf(p)<0&&(t[p]=n[p]);if(n!=null&&u)for(var p of u(n))o.indexOf(p)<0&&r.call(n,p)&&(t[p]=n[p]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var p=t,{components:n}=p,o=y(p,[\"components\"]);return mdx(MDXLayout,c(e(e({},layoutProps),o),{components:n,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Naming Functions\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Calling functions","slug":"calling-functions","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var u=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var s=(n,o,t)=>o in n?D(n,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[o]=t,e=(n,o)=>{for(var t in o||(o={}))a.call(o,t)&&s(n,t,o[t]);if(u)for(var t of u(o))r.call(o,t)&&s(n,t,o[t]);return n},c=(n,o)=>M(n,X(o));var y=(n,o)=>{var t={};for(var p in n)a.call(n,p)&&o.indexOf(p)<0&&(t[p]=n[p]);if(n!=null&&u)for(var p of u(n))o.indexOf(p)<0&&r.call(n,p)&&(t[p]=n[p]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var p=t,{components:n}=p,o=y(p,[\"components\"]);return mdx(MDXLayout,c(e(e({},layoutProps),o),{components:n,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Calling functions\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Function parameters","slug":"function-parameters","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var u=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;var s=(t,o,n)=>o in t?D(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,r=(t,o)=>{for(var n in o||(o={}))u.call(o,n)&&s(t,n,o[n]);if(p)for(var n of p(o))a.call(o,n)&&s(t,n,o[n]);return t},c=(t,o)=>M(t,X(o));var y=(t,o)=>{var n={};for(var e in t)u.call(t,e)&&o.indexOf(e)<0&&(n[e]=t[e]);if(t!=null&&p)for(var e of p(t))o.indexOf(e)<0&&a.call(t,e)&&(n[e]=t[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:t}=e,o=y(e,[\"components\"]);return mdx(MDXLayout,c(r(r({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Function parameters\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Optional Parameters","slug":"optional-parameters","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable;var s=(t,o,n)=>o in t?M(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,a=(t,o)=>{for(var n in o||(o={}))r.call(o,n)&&s(t,n,o[n]);if(p)for(var n of p(o))u.call(o,n)&&s(t,n,o[n]);return t},y=(t,o)=>X(t,c(o));var D=(t,o)=>{var n={};for(var e in t)r.call(t,e)&&o.indexOf(e)<0&&(n[e]=t[e]);if(t!=null&&p)for(var e of p(t))o.indexOf(e)<0&&u.call(t,e)&&(n[e]=t[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:t}=e,o=D(e,[\"components\"]);return mdx(MDXLayout,y(a(a({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Optional Parameters\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Return values","slug":"return-values","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var u=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;var s=(t,o,n)=>o in t?M(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,p=(t,o)=>{for(var n in o||(o={}))r.call(o,n)&&s(t,n,o[n]);if(u)for(var n of u(o))a.call(o,n)&&s(t,n,o[n]);return t},y=(t,o)=>X(t,c(o));var D=(t,o)=>{var n={};for(var e in t)r.call(t,e)&&o.indexOf(e)<0&&(n[e]=t[e]);if(t!=null&&u)for(var e of u(t))o.indexOf(e)<0&&a.call(t,e)&&(n[e]=t[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:t}=e,o=D(e,[\"components\"]);return mdx(MDXLayout,y(p(p({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Return values\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Pass by Value","slug":"pass-by-value","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var r=(o,t,n)=>t in o?M(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,u=(o,t)=>{for(var n in t||(t={}))a.call(t,n)&&r(o,n,t[n]);if(p)for(var n of p(t))s.call(t,n)&&r(o,n,t[n]);return o},y=(o,t)=>X(o,c(t));var D=(o,t)=>{var n={};for(var e in o)a.call(o,e)&&t.indexOf(e)<0&&(n[e]=o[e]);if(o!=null&&p)for(var e of p(o))t.indexOf(e)<0&&s.call(o,e)&&(n[e]=o[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:o}=e,t=D(e,[\"components\"]);return mdx(MDXLayout,y(u(u({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Pass by Value\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Pass by Reference","slug":"pass-by-reference","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var s=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable;var a=(o,t,n)=>t in o?D(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,r=(o,t)=>{for(var n in t||(t={}))s.call(t,n)&&a(o,n,t[n]);if(p)for(var n of p(t))u.call(t,n)&&a(o,n,t[n]);return o},y=(o,t)=>M(o,X(t));var c=(o,t)=>{var n={};for(var e in o)s.call(o,e)&&t.indexOf(e)<0&&(n[e]=o[e]);if(o!=null&&p)for(var e of p(o))t.indexOf(e)<0&&u.call(o,e)&&(n[e]=o[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:o}=e,t=c(e,[\"components\"]);return mdx(MDXLayout,y(r(r({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Pass by Reference\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"An analogy","slug":"an-analogy","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var a=Object.getOwnPropertySymbols;var u=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var y=(o,n,t)=>n in o?M(o,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[n]=t,e=(o,n)=>{for(var t in n||(n={}))u.call(n,t)&&y(o,t,n[t]);if(a)for(var t of a(n))r.call(n,t)&&y(o,t,n[t]);return o},s=(o,n)=>X(o,c(n));var D=(o,n)=>{var t={};for(var p in o)u.call(o,p)&&n.indexOf(p)<0&&(t[p]=o[p]);if(o!=null&&a)for(var p of a(o))n.indexOf(p)<0&&r.call(o,p)&&(t[p]=o[p]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var p=t,{components:o}=p,n=D(p,[\"components\"]);return mdx(MDXLayout,s(e(e({},layoutProps),n),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"An analogy\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Using Functions in your Code","slug":"using-functions-in-your-code","md":{"compiledSource":"var i=Object.defineProperty,D=Object.defineProperties;var M=Object.getOwnPropertyDescriptors;var e=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var y=(o,n,t)=>n in o?i(o,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[n]=t,p=(o,n)=>{for(var t in n||(n={}))r.call(n,t)&&y(o,t,n[t]);if(e)for(var t of e(n))s.call(n,t)&&y(o,t,n[t]);return o},a=(o,n)=>D(o,M(n));var c=(o,n)=>{var t={};for(var u in o)r.call(o,u)&&n.indexOf(u)<0&&(t[u]=o[u]);if(o!=null&&e)for(var u of e(o))n.indexOf(u)<0&&s.call(o,u)&&(t[u]=o[u]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var u=t,{components:o}=u,n=c(u,[\"components\"]);return mdx(MDXLayout,a(p(p({},layoutProps),n),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Using Functions in your Code\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Recursion","slug":"recursion","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var a=(o,t,n)=>t in o?D(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,u=(o,t)=>{for(var n in t||(t={}))r.call(t,n)&&a(o,n,t[n]);if(p)for(var n of p(t))s.call(t,n)&&a(o,n,t[n]);return o},c=(o,t)=>M(o,X(t));var y=(o,t)=>{var n={};for(var e in o)r.call(o,e)&&t.indexOf(e)<0&&(n[e]=o[e]);if(o!=null&&p)for(var e of p(o))t.indexOf(e)<0&&s.call(o,e)&&(n[e]=o[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:o}=e,t=y(e,[\"components\"]);return mdx(MDXLayout,c(u(u({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Recursion\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":2,"text":"Example","slug":"example","md":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var e=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var s=(o,t,n)=>t in o?M(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,u=(o,t)=>{for(var n in t||(t={}))a.call(t,n)&&s(o,n,t[n]);if(e)for(var n of e(t))r.call(t,n)&&s(o,n,t[n]);return o},y=(o,t)=>X(o,c(t));var D=(o,t)=>{var n={};for(var p in o)a.call(o,p)&&t.indexOf(p)<0&&(n[p]=o[p]);if(o!=null&&e)for(var p of e(o))t.indexOf(p)<0&&r.call(o,p)&&(n[p]=o[p]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var p=n,{components:o}=p,t=D(p,[\"components\"]);return mdx(MDXLayout,y(u(u({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Example\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Practical Application: Date Converter","slug":"practical-application-date-converter","md":{"compiledSource":"var s=Object.defineProperty,y=Object.defineProperties;var M=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;var u=(t,o,n)=>o in t?s(t,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[o]=n,a=(t,o)=>{for(var n in o||(o={}))r.call(o,n)&&u(t,n,o[n]);if(p)for(var n of p(o))c.call(o,n)&&u(t,n,o[n]);return t},D=(t,o)=>y(t,M(o));var i=(t,o)=>{var n={};for(var e in t)r.call(t,e)&&o.indexOf(e)<0&&(n[e]=t[e]);if(t!=null&&p)for(var e of p(t))o.indexOf(e)<0&&c.call(t,e)&&(n[e]=t[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:t}=e,o=i(e,[\"components\"]);return mdx(MDXLayout,D(a(a({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Practical Application: Date Converter\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Vocabulary","slug":"vocabulary","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var u=Object.getOwnPropertySymbols;var e=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var y=(o,t,n)=>t in o?D(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,a=(o,t)=>{for(var n in t||(t={}))e.call(t,n)&&y(o,n,t[n]);if(u)for(var n of u(t))r.call(t,n)&&y(o,n,t[n]);return o},c=(o,t)=>M(o,X(t));var s=(o,t)=>{var n={};for(var p in o)e.call(o,p)&&t.indexOf(p)<0&&(n[p]=o[p]);if(o!=null&&u)for(var p of u(o))t.indexOf(p)<0&&r.call(o,p)&&(n[p]=o[p]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var p=n,{components:o}=p,t=s(p,[\"components\"]);return mdx(MDXLayout,c(a(a({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Vocabulary\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"level":1,"text":"Python Concepts","slug":"python-concepts","md":{"compiledSource":"var D=Object.defineProperty,M=Object.defineProperties;var X=Object.getOwnPropertyDescriptors;var e=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var y=(o,t,n)=>t in o?D(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,u=(o,t)=>{for(var n in t||(t={}))r.call(t,n)&&y(o,n,t[n]);if(e)for(var n of e(t))s.call(t,n)&&y(o,n,t[n]);return o},a=(o,t)=>M(o,X(t));var c=(o,t)=>{var n={};for(var p in o)r.call(o,p)&&t.indexOf(p)<0&&(n[p]=o[p]);if(o!=null&&e)for(var p of e(o))t.indexOf(p)<0&&s.call(o,p)&&(n[p]=o[p]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var p=n,{components:o}=p,t=c(p,[\"components\"]);return mdx(MDXLayout,a(u(u({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Python Concepts\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}}]},"__N_SSG":true}